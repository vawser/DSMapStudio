//------------------------------------------------
//--- 010 Editor v9.0.2 Binary Template
//
//      File: FLO.bt
//   Authors: TKGP
//   Version: 
//   Purpose: Dark Souls 2 UI configs
//  Category: Katana
// File Mask: *.flo
//  ID Bytes: 
//   History: 
//------------------------------------------------

#include "Util.bt"

// This is a pretty stupid heuristic but it should be accurate
local int VARINT_LONG = ReadInt(0xC) == 0;

LittleEndian();
if (ReadByte(VARINT_LONG ? 0x58 : 0x34))
    BigEndian();

struct Animator;
struct Texture;

//------------------------------------------------

typedef struct {
    int unk00; Assert(unk00 == 0x20000);
    // Many fields like this appear to just be padding in 64-bit,
    // but they sometimes have pretty suspicious values
    // so I can't be completely certain.
    if (VARINT_LONG) {
        int unk04;
    }
    Varint spriteSetsOffset <format=hex>;
    Varint offset2 <format=hex>;
    Varint nodesOffset <format=hex>;
    Varint animatorsOffset <format=hex>;
    Varint rootsOffset <format=hex>;
    Varint texturesOffset <format=hex>;
    Varint stringsOffset <format=hex>;
    Varint textsOffset <format=hex>;
    short spriteSetCount;
    short count2; Assert(count2 == 0);
    short nodeCount;
    short animatorCount;
    short rootCount;
    short textureCount;
    short stringCount;
    short textCount;
    byte bigEndian; Assert(bigEndian == 0 || bigEndian == 1);
    byte unk59 <hidden=true>; Assert(unk59 == 0);
    byte unk5A; Assert(unk5A == 30 || unk5A == 31 || unk5A == 60); // Framerate?
    byte unk5B <hidden=true>; Assert(unk5B == 0);
    int unk5C <hidden=true>; Assert(unk5C == 0);
    int unk60 <hidden=true>; Assert(unk60 == 0);
    int unk64 <hidden=true>; Assert(unk64 == 0);
    int unk68 <hidden=true>; Assert(unk68 == 0);
    int unk6C <hidden=true>; Assert(unk6C == 0);
    int unk70 <hidden=true>; Assert(unk70 == 0);
    int unk74 <hidden=true>; Assert(unk74 == 0);
    int unk78 <hidden=true>; Assert(unk78 == 0);
    int unk7C <hidden=true>; Assert(unk7C == 0);
    int unk80 <hidden=true>; Assert(unk80 == 0);
    int unk84 <hidden=true>; Assert(unk84 == 0);
    int unk88 <hidden=true>; Assert(unk88 == 0);
    int unk8C <hidden=true>; Assert(unk8C == 0);
    int unk90 <hidden=true>; Assert(unk90 == 0);
    int unk94 <hidden=true>; Assert(unk94 == 0);
    int unk98 <hidden=true>; Assert(unk98 == 0);
    int unk9C <hidden=true>; Assert(unk9C == 0);
    int unkA0 <hidden=true>; Assert(unkA0 == 0);
    if (VARINT_LONG) {
        int unkA4;
    }
} Header <bgcolor=cLtRed>;


typedef struct {
    Vector2 v1;
    Vector2 v2;
} TexRegion <read=ReadTexRegion>;

string ReadTexRegion(TexRegion &reg) {
    string str;
    return SPrintf(str, "%s %s", ReadVector2(reg.v1), ReadVector2(reg.v2));
}


typedef struct {
    Vector2 position;
    Vector2 scale;
    Vector2 skew;
    int unk18; Assert(unk18 == -1);
    if (VARINT_LONG) {
        int pad1C <hidden=true>; Assert(pad1C == 0);
    }
    Varint textureOffset <format=hex>;
    short textureID;
    short unk2A <hidden=true>; Assert(unk2A == 0);
    if (VARINT_LONG) {
        int pad2C <hidden=true>; Assert(pad2C == 0);
    }
    Varint texRegionOffset <format=hex>;
    int unk38 <hidden=true>; Assert(unk38 == 0);
    int unk3C <hidden=true>; Assert(unk3C == 0);
    
    local quad pos <hidden=true> = FTell();
    FSeek(textureOffset.val);
    Texture texture;
    FSeek(texRegionOffset.val);
    TexRegion texRegion;
    FSeek(pos);
} Sprite <read=ReadSprite, bgcolor=cGreen, optimize=false>;

string ReadSprite(Sprite &sp) {
    return sp.texture.name.str;
}

typedef struct {
    short id;
    short spriteCount;
    if (VARINT_LONG) {
        int pad04 <hidden=true>; Assert(pad04 == 0);
    }
    Varint spritesOffset <format=hex>;
    int unk10 <hidden=true>; Assert(unk10 == 0);
    int unk14 <hidden=true>; Assert(unk14 == 0);
    
    local quad pos <hidden=true> = FTell();
    FSeek(spritesOffset.val);
    Sprite sprites[spriteCount];
    FSeek(pos);
} SpriteSet <read=ReadSpriteSet, bgcolor=cLtGreen, optimize=false>;

string ReadSpriteSet(SpriteSet &ss) {
    string str;
    return SPrintf(str, "%3i", ss.id);
}


typedef struct {
    int unk00;
    short unk04;
    short unk06;
    int unk08;
    int unk0C <hidden=true>; Assert(unk0C == 0);
    int unk10 <hidden=true>; Assert(unk10 == 0);
    int unk14 <hidden=true>; Assert(unk14 == 0);
    int unk18 <hidden=true>; Assert(unk18 == 0);
    int unk1C <hidden=true>; Assert(unk1C == 0);
} NodeItemB <read=ReadNodeItemB, optimize=false>;

string ReadNodeItemB(NodeItemB &item) {
    string str;
    return SPrintf(str, "%3i %3i %3i %3i",
        item.unk00, item.unk04, item.unk06, item.unk08);
}


typedef struct {
    Varint nodeItemsBOffset <format=hex>;
    short nodeItemBCount;
    short unk0A <hidden=true>; Assert(unk0A == 0);
    int unk0C <hidden=true>; Assert(unk0C == 0);
    int unk10 <hidden=true>; Assert(unk10 == 0);
    if (VARINT_LONG) {
        int unk14;
    }
    
    local quad pos <hidden=true> = FTell();
    FSeek(nodeItemsBOffset.val);
    NodeItemB nodeItemsB[nodeItemBCount];
    FSeek(pos);
} NodeListB;


typedef struct {
    int unk00;
    short unk04;
    short unk06 <hidden=true>; Assert(unk06 == 0);
    int unk08 <hidden=true>; Assert(unk08 == 0);
    int unk0C <hidden=true>; Assert(unk0C == 0);
} NodeItemA <read=ReadNodeItemA, optimize=false>;

string ReadNodeItemA(NodeItemA &item) {
    string str;
    return SPrintf(str, "%3i %3i", item.unk00, item.unk04);
}


typedef struct {
    Varint nodeItemsAOffset <format=hex>;
    short nodeItemACount;
    short unk0A <hidden=true>; Assert(unk0A == 0);
    int unk0C <hidden=true>; Assert(unk0C == 0);
    int unk10 <hidden=true>; Assert(unk10 == 0);
    if (VARINT_LONG) {
        int unk14;
    }
    
    local quad pos <hidden=true> = FTell();
    FSeek(nodeItemsAOffset.val);
    NodeItemA nodeItemsA[nodeItemACount];
    FSeek(pos);
} NodeListA <optimize=false>;


typedef struct {
    short id;
    short animatorCount;
    if (VARINT_LONG) {
        int unk04;
    }
    Varint animatorsOffset <format=hex>;
    int unk10;
    short unk14; Assert(unk14 == 1);
    short unk16 <hidden=true>; Assert(unk16 == 0);
    Varint nodeListAOffset <format=hex>;
    Varint nodeListBOffset <format=hex>;
    
    // Dubious
    Varint unk28 <hidden=true>; Assert(unk28.val == 0);
    Varint unk2C <hidden=true>; Assert(unk2C.val == 0);
    int unk30 <hidden=true>; Assert(unk30 == 0);
    int unk34 <hidden=true>; Assert(unk34 == 0);
    int unk38 <hidden=true>; Assert(unk38 == 0);
    int unk3C <hidden=true>; Assert(unk3C == 0);
    
    local quad pos <hidden=true> = FTell();
    FSeek(animatorsOffset.val);
    struct { Animator animators[animatorCount]; } animators;
    
    if (nodeListAOffset.val != 0) {
        FSeek(nodeListAOffset.val);
        NodeListA nodeListA;
    }
    if (nodeListBOffset.val != 0) {
        FSeek(nodeListBOffset.val);
        NodeListB nodelistB;
    }
    FSeek(pos);
} Node <read=ReadNode, bgcolor=cAqua, optimize=false>;

string ReadNode(Node &node) {
    string str;
    return SPrintf(str, "%3i %3i", node.id, node.unk10);
}


typedef struct {
    Vector2 translation;
    Vector2 scale;
    Vector2 skew;
    ubyte color[4]; // RGBA
    int unk1C; // Usually 0, possibly another color?
    int unk20;
    int unk24;
    int unk28 <hidden=true>; Assert(unk28 == 0);
    int unk2C <hidden=true>; Assert(unk2C == 0);
} Frame <read=ReadFrame, optimize=false>;

string ReadFrame(Frame &frame) {
    string str;
    return SPrintf(str, "[%2X %2X %2X %2X] %3i %3i %3i",
        frame.color[0], frame.color[1], frame.color[2], frame.color[3],
        frame.unk1C, frame.unk20, frame.unk24);
}


typedef struct {
    short elementID;
    short frameCount;
    if (VARINT_LONG) {
        int pad04 <hidden=true>; Assert(pad04 == 0);
    }
    Varint framesOffset <format=hex>;
    short unk10;
    short unk12;
    short unk14;
    short unk16;
    int unk18;
    int unk1C;
    int unk20 <hidden=true>; Assert(unk20 == 0);
    int unk24 <hidden=true>; Assert(unk24 == 0);
    
    local quad pos <hidden=true> = FTell();
    FSeek(framesOffset.val);
    struct { Frame frames[frameCount]; } frames;
    FSeek(pos);
} Animator <read=ReadAnimator, bgcolor=cLtBlue, optimize=false>;

string ReadAnimator(Animator &anim) {
    string str;
    return SPrintf(str, "%3i [%3i]", anim.elementID, anim.frameCount);
}


typedef struct {
    int id;
    int nodeID;
    Varint nodeOffset <format=hex>;
    Vector2 position;
    short unk18;
    short unk1A; // byte byte?
    int unk1C; // In SotfS these two are 0
    int unk20; // In DX9 this looks like SotfS's unk24
    if (VARINT_LONG) {
        int unk24;
    }
    
    local quad pos <hidden=true> = FTell();
    FSeek(nodeOffset.val);
    Node node;
    FSeek(pos);
} Root <read=ReadRoot, bgcolor=cPurple, optimize=false>;

string ReadRoot(Root &root) {
    string str;
    return SPrintf(str, "%3i", root.id);
}


typedef struct {
    OffsetString name(VARINT_LONG, 0);
    short id;
    short unk0A <hidden=true>; Assert(unk0A == 0);
    short unk0C <hidden=true>; Assert(unk0C == 0);
    short width; // These don't seem to actually do anything
    short height;
    short unk12 <hidden=true>; Assert(unk12 == 0);
    if (VARINT_LONG) {
        int unk14;
    }
} Texture <read=ReadTexture, bgcolor=cDkYellow, optimize=false>;

string ReadTexture(Texture &tex) {
    string str;
    SPrintf(str, "%3i ", tex.id);
    return str + tex.name.str;
}


typedef struct {
    string str;
} StringWrapper <read=ReadStringWrapper, bgcolor=cBlack, fgcolor=cWhite, optimize=false>;

string ReadStringWrapper(StringWrapper& sw) {
    return sw.str;
}


typedef struct {
    short id;
    short unk02 <hidden=true>; Assert(unk02 == 0);
    short font;
    short unk06;
    short size;
    short unk0A <hidden=true>; Assert(unk0A == 0);
    short unk0C;
    short unk0E <hidden=true>; Assert(unk0E == 0);
    short unk10;
    ubyte color[4]; // RGBA
    byte unk16;
    byte unk17;
    
    // Dubious
    Varint unk18 <hidden=true>; Assert(unk18.val == 0);
    int unk20 <hidden=true>; Assert(unk20 == 0);
    int unk24 <hidden=true>; Assert(unk24 == 0);
    int unk28 <hidden=true>; Assert(unk28 == 0);
    int unk2C <hidden=true>; Assert(unk2C == 0);
    int unk30 <hidden=true>; Assert(unk30 == 0);
    if (VARINT_LONG) {
        int unk34;
    }
} Text <read=ReadText, bgcolor=cYellow, optimize=false>;

string ReadText(Text &text) {
    string str;
    return SPrintf(str, "%3i", text.id);
}

//------------------------------------------------

Header header;
if (header.spriteSetCount > 0) {
    FSeek(header.spriteSetsOffset.val);
    struct { SpriteSet spriteSets[header.spriteSetCount]; } spriteSets;
}
if (header.nodeCount > 0) {
    FSeek(header.nodesOffset.val);
    struct { Node nodes[header.nodeCount]; } nodes;
}
if (header.animatorCount > 0) {
    FSeek(header.animatorsOffset.val);
    struct { Animator animators[header.animatorCount]; } animators;
}
if (header.rootCount > 0) {
    FSeek(header.rootsOffset.val);
    struct { Root roots[header.rootCount]; } roots;
}
if (header.textureCount > 0) {
    FSeek(header.texturesOffset.val);
    struct { Texture textures[header.textureCount]; } textures;
}
if (header.stringCount > 0) {
    FSeek(header.stringsOffset.val);
    struct { StringWrapper strings[header.stringCount]; } strings;
}
if (header.textCount > 0) {
    FSeek(header.textsOffset.val);
    struct { Text texts[header.textCount]; } texts;
}
// Pad to 0x20
