//------------------------------------------------
//--- 010 Editor v9.0.1 Binary Template
//
//      File: MSB2\Part.bt
//   Authors: TKGP
//   Version: 
//   Purpose: DS2 MSB parts
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

enum <byte> PartType {
    PartTypeMapPiece = 0,
    PartTypeObject = 1,
    PartTypeCollision = 3,
    PartTypeNavmesh = 4,
    PartTypeConnectCollision = 5,
};

struct PartMapPiece;
struct PartObject;
struct PartCollision;
struct PartNavmesh;
struct PartConnectCollision;

//------------------------------------------------

typedef struct (int version) {
    local quad start <hidden=true> = FTell();

    Varint nameOffset;
    PartType type;
    byte unk09 <hidden=true>; Assert(unk09 == 0);
    short id;
    short modelIndex;
    short unk0E <hidden=true>; Assert(unk0E == 0);
    Vector3 position;
    Vector3 rotation;
    Vector3 scale;
    uint drawGroupsMaybe[4];
    int unk44; // On collisions, these 4 values match the 4 values in navmesh type data
    int unk48; // Nvm groups?
    int unk4C;
    int unk50;
    uint dispGroupsMaybe[4];
    int unk64;
    int unk68 <hidden=true>; Assert(unk68 == 0);
    byte unk6C;
    byte unk6D <hidden=true>; Assert(unk6D == 0);
    byte unk6E;
    byte unk6F <hidden=true>; Assert(unk6F == 0);
    Varint typeDataOffset;
    if (VARINT_LONG) {
        quad unk78 <hidden=true>; Assert(unk78 == 0);
    }
    
    Assert(nameOffset.val > 0);
    FSeek(start + nameOffset.val);
    wstring name;
    // Pad to 0x2C in DS2, 0x20 in Scholar?
    
    Assert(typeDataOffset.val > 0);
    FSeek(start + typeDataOffset.val);
    switch (type) {
        case PartTypeMapPiece: PartMapPiece mapPiece; break;
        case PartTypeObject: PartObject object; break;
        case PartTypeCollision: PartCollision collision(version); break;
        case PartTypeNavmesh: PartNavmesh navmesh; break;
        case PartTypeConnectCollision: PartConnectCollision connectCollision; break;
        default: Assert(false);
    }
} Part <read=ReadPart>;

wstring ReadPart(Part& part) {
    string str;
    if (false && part.type == PartTypeMapPiece) {
        SPrintf(str, "%2i %2i %i ", part.type, part.mapPiece.unk00, part.mapPiece.unk02);
    } else if (false && part.type == PartTypeObject) {
        SPrintf(str, "%2i %8Xh %8Xh ", part.type, part.object.unk00, part.object.unk04);
    } else if (part.type == PartTypeNavmesh) {
        SPrintf(str, "%2i %8Xh %8Xh %8Xh %8Xh ", part.type, part.navmesh.unk00, part.navmesh.unk04, part.navmesh.unk08, part.navmesh.unk0C);
    } else if (false && part.type == PartTypeConnectCollision) {
        SPrintf(str, "%2i %8Xh %8Xh ", part.type, part.connectCollision.unk08, part.connectCollision.unk0C);
    } else {
        SPrintf(str, "%2i %8Xh %8Xh %8Xh %8Xh ", part.type, part.unk44, part.unk48, part.unk4C, part.unk50);
    }
    return str + part.name;
}


typedef struct {
    short unk00; // Usually -1, sometimes 0, 1
    byte unk02; // Usually 0, sometimes 1, 2
    byte unk03 <hidden=true>; Assert(unk03 == 0);
    if (VARINT_LONG) {
        int unk04 <hidden=true>; Assert(unk04 == 0);
    }
} PartMapPiece;


typedef struct {
    int unk00;
    short unk04;
    short unk06 <hidden=true>; Assert(unk06 == 0);
    int unk08 <hidden=true>; Assert(unk08 == 0);
    int unk0C <hidden=true>; Assert(unk0C == 0);
} PartObject;


typedef struct (int version) {
    int unk00;
    int unk04;
    int unk08;
    int unk0C;
    byte unk10;
    byte unk11;
    byte unk12;
    byte unk13;
    byte unk14;
    byte unk15;
    byte unk16 <hidden=true>; Assert(unk16 == 0);
    byte unk17;
    int unk18;
    int unk1C;
    int unk20;
    short unk24 <hidden=true>; Assert(unk24 == 0);
    byte unk26;
    byte unk27;
    int unk28;
    byte unk2C;
    byte unk2D <hidden=true>; Assert(unk2D == 0);
    short unk2E;
    int unk30;
    byte unk34 <hidden=true>; Assert(unk34 == 0);
    byte unk35;
    short unk36;
    int unk38 <hidden=true>; Assert(unk38 == 0);
    int unk3C;
    byte unk40;
    byte unk41 <hidden=true>; Assert(unk41 == 0);
    byte unk42 <hidden=true>; Assert(unk42 == 0);
    byte unk43 <hidden=true>; Assert(unk43 == 0);
    int unk44;
    int unk48 <hidden=true>; Assert(unk48 == 0);
    int unk4C <hidden=true>; Assert(unk4C == 0);
    if (version >= 5) {
        int unk50 <hidden=true>; Assert(unk50 == 0);
        int unk54 <hidden=true>; Assert(unk54 == 0);
    }
} PartCollision;


typedef struct {
    int unk00;
    int unk04;
    int unk08;
    int unk0C;
    int unk10 <hidden=true>; Assert(unk10 == 0);
    int unk14 <hidden=true>; Assert(unk14 == 0);
    int unk18 <hidden=true>; Assert(unk18 == 0);
    int unk1C <hidden=true>; Assert(unk1C == 0);
} PartNavmesh;


typedef struct {
    int collisionIndex;
    byte mapID[4];
    int unk08;
    byte unk0C; // 0 or 1?
    byte unk0D <hidden=true>; Assert(unk0D == 0);
    byte unk0E <hidden=true>; Assert(unk0E == 0);
    byte unk0F <hidden=true>; Assert(unk0F == 0);
} PartConnectCollision;
