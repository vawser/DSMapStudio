//------------------------------------------------
//--- 010 Editor v9.0.1 Binary Template
//
//      File: MSB2\Event.bt
//   Authors: TKGP
//   Version: 
//   Purpose: DS2 MSB events
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

enum <byte> EventType {
    EventTypeLight = 1,
    EventTypeShadow = 2,
    EventTypeFog = 3,
    EventTypeBGColor = 4,
    EventTypeMapOffset = 5,
    EventTypeWarp = 6,
    EventTypeCheapMode = 7,
};

struct EventLight;
struct EventShadow;
struct EventFog;
struct EventBGColor;
struct EventMapOffset;
struct EventWarp;
struct EventCheapMode;

//------------------------------------------------

typedef struct {
    local quad start <hidden=true> = FTell();
    
    Varint nameOffset;
    int eventID;
    EventType type;
    byte unk0D <hidden=true>; Assert(unk0D == 0);
    short id;
    Varint typeDataOffset;
    if (!VARINT_LONG) {
        int unk10 <hidden=true>; Assert(unk10 == 0);
        int unk14 <hidden=true>; Assert(unk14 == 0);
    }
    // Total size 0x18 either way
    
    Assert(nameOffset.val > 0);
    FSeek(start + nameOffset.val);
    wstring name;
    
    Assert(typeDataOffset.val > 0);
    FSeek(start + typeDataOffset.val);
    switch (type) {
        case EventTypeLight: EventLight light; break;
        case EventTypeShadow: EventShadow shadow; break;
        case EventTypeFog: EventFog fog; break;
        case EventTypeBGColor: EventBGColor bgColor; break;
        case EventTypeMapOffset: EventMapOffset mapOffset; break;
        case EventTypeWarp: EventWarp warp; break;
        case EventTypeCheapMode: EventCheapMode cheapMode; break;
        default: Assert(false);
    }
} Event <read=ReadEvent>;

wstring ReadEvent(Event& event) {
    string str;
    SPrintf(str, "%2i ", event.type);
    return str + event.name;
}


typedef struct {
    byte unk00;
    byte unk01 <hidden=true>; Assert(unk01 == 0);
    short unk02; Assert(unk02 == -1);
    float unk04;
    float unk08;
    ubyte color0C[4]; // RGBA
    ubyte color10[4];
    int unk14 <hidden=true>; Assert(unk14 == 0);
    int unk18 <hidden=true>; Assert(unk18 == 0);
    float unk1C;
    float unk20;
    ubyte color24[4];
    ubyte color28[4];
    int unk2C <hidden=true>; Assert(unk2C == 0);
    int unk30 <hidden=true>; Assert(unk30 == 0);
    ubyte color34[4];
    ubyte color38[4];
    ubyte color3C[4];
    float unk40;
    byte unk44;
    byte unk45 <hidden=true>; Assert(unk45 == 0);
    byte unk46 <hidden=true>; Assert(unk46 == 0);
    byte unk47 <hidden=true>; Assert(unk47 == 0);
    int unk48 <hidden=true>; Assert(unk48 == 0);
    int unk4C <hidden=true>; Assert(unk4C == 0);
    int unk50 <hidden=true>; Assert(unk50 == 0);
    int unk54 <hidden=true>; Assert(unk54 == 0);
    int unk58 <hidden=true>; Assert(unk58 == 0);
    int unk5C <hidden=true>; Assert(unk5C == 0);
    int unk60 <hidden=true>; Assert(unk60 == 0);
    int unk64 <hidden=true>; Assert(unk64 == 0);
    int unk68 <hidden=true>; Assert(unk68 == 0);
    int unk6C <hidden=true>; Assert(unk6C == 0);
    int unk70 <hidden=true>; Assert(unk70 == 0);
    int unk74 <hidden=true>; Assert(unk74 == 0);
    int unk78 <hidden=true>; Assert(unk78 == 0);
    int unk7C <hidden=true>; Assert(unk7C == 0);
} EventLight;


typedef struct {
    int unk00 <hidden=true>; Assert(unk00 == 0);
    float unk04;
    float unk08;
    float unk0C;
    int unk10 <hidden=true>; Assert(unk10 == 0);
    float unk14;
    float unk18;
    int unk1C <hidden=true>; Assert(unk1C == 0);
    float unk20;
    ubyte color24[4];
    int unk28 <hidden=true>; Assert(unk28 == 0);
    int unk2C <hidden=true>; Assert(unk2C == 0);
    int unk30 <hidden=true>; Assert(unk30 == 0);
    int unk34 <hidden=true>; Assert(unk34 == 0);
    int unk38 <hidden=true>; Assert(unk38 == 0);
    int unk3C <hidden=true>; Assert(unk3C == 0);
} EventShadow;


typedef struct {
    byte unk00;
    byte unk01 <hidden=true>; Assert(unk01 == 0);
    byte unk02 <hidden=true>; Assert(unk02 == 0);
    byte unk03 <hidden=true>; Assert(unk03 == 0);
    ubyte color04[4];
    float unk08;
    float unk0C;
    float unk10;
    byte unk14;
    byte unk15;
    byte unk16;
    byte unk17 <hidden=true>; Assert(unk17 == 0);
    int unk18 <hidden=true>; Assert(unk18 == 0);
    int unk1C <hidden=true>; Assert(unk1C == 0);
    int unk20 <hidden=true>; Assert(unk20 == 0);
    int unk24 <hidden=true>; Assert(unk24 == 0);
} EventFog;


typedef struct {
    ubyte color[4];
    int unk04 <hidden=true>; Assert(unk04 == 0);
    int unk08 <hidden=true>; Assert(unk08 == 0);
    int unk0C <hidden=true>; Assert(unk0C == 0);
    int unk10 <hidden=true>; Assert(unk10 == 0);
    int unk14 <hidden=true>; Assert(unk14 == 0);
    int unk18 <hidden=true>; Assert(unk18 == 0);
    int unk1C <hidden=true>; Assert(unk1C == 0);
    int unk20 <hidden=true>; Assert(unk20 == 0);
    int unk24 <hidden=true>; Assert(unk24 == 0);
} EventBGColor;


typedef struct {
    Vector3 translation;
    float degree <hidden=true>; Assert(degree == 0);
} EventMapOffset;


typedef struct {
    byte unk00;
    byte unk01 <hidden=true>; Assert(unk01 == 0);
    byte unk02 <hidden=true>; Assert(unk02 == 0);
    byte unk03 <hidden=true>; Assert(unk03 == 0);
    Vector3 position;
} EventWarp;


typedef struct {
    short unk00; // 200 in both instances of this event
    short unk02 <hidden=true>; Assert(unk02 == 0);
    int unk04 <hidden=true>; Assert(unk04 == 0);
    int unk08 <hidden=true>; Assert(unk08 == 0);
    int unk0C <hidden=true>; Assert(unk0C == 0);
} EventCheapMode;
