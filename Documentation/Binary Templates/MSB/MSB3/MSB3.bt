//------------------------------------------------
//--- 010 Editor v9.0.1 Binary Template
//
//      File: MSB3.bt
//   Authors: TKGP
//   Version: 
//   Purpose: DS3 map layouts
//  Category: Dantelion
// File Mask: *.msb
//  ID Bytes: 4D 53 42 20 01 00 00 00 10 00 00 00 00 00 01 FF 03 00 00 00
//   History: 
//------------------------------------------------

#include "..\..\Util.bt"
#include "..\MSB.bt"
#include "Model.bt"
#include "Event.bt"
#include "Point.bt"
#include "Route.bt"
#include "Layer.bt"
#include "Part.bt"
#include "PartsPose.bt"
#include "BoneName.bt"

LittleEndian();
local int VARINT_LONG = 1;

//------------------------------------------------

typedef struct {
    Param param(3, "MODEL_PARAM_ST", 1);
    local int i <hidden=true>;
    for (i = 0; i < param.count - 1; i++) {
        FSeek(param.offsets[i].val);
        Model model;
    }
    FSeek(param.nextParamOffset.val);
} ModelParam <read=ReadModelParam, bgcolor=cLtGreen>;

string ReadModelParam(ModelParam& modelParam) {
    return ReadParam(modelParam.param);
}


typedef struct {
    Param param(3, "EVENT_PARAM_ST", 1);
    local int i <hidden=true>;
    for (i = 0; i < param.count - 1; i++) {
        FSeek(param.offsets[i].val);
        Event event;
    }
    FSeek(param.nextParamOffset.val);
} EventParam <read=ReadEventParam, bgcolor=cYellow>;

string ReadEventParam(EventParam& eventParam) {
    return ReadParam(eventParam.param);
}


typedef struct {
    Param param(3, "POINT_PARAM_ST", 1);
    local int i <hidden=true>;
    for (i = 0; i < param.count - 1; i++) {
        FSeek(param.offsets[i].val);
        Point point;
    }
    FSeek(param.nextParamOffset.val);
} PointParam <read=ReadPointParam, bgcolor=cAqua>;

string ReadPointParam(PointParam& pointParam) {
    return ReadParam(pointParam.param);
}


typedef struct {
    Param param(3, "ROUTE_PARAM_ST", 1);
    local int i <hidden=true>;
    for (i = 0; i < param.count - 1; i++) {
        FSeek(param.offsets[i].val);
        Route route;
    }
    FSeek(param.nextParamOffset.val);
} RouteParam <read=ReadRouteParam, bgcolor=cRed>;

string ReadRouteParam(RouteParam& routeParam) {
    return ReadParam(routeParam.param);
}


typedef struct {
    Param param(3, "LAYER_PARAM_ST", 1);
    local int i <hidden=true>;
    for (i = 0; i < param.count - 1; i++) {
        FSeek(param.offsets[i].val);
        Layer layer;
    }
    FSeek(param.nextParamOffset.val);
} LayerParam <read=ReadLayerParam, bgcolor=cLtGray, fgcolor=cBlack>;

string ReadLayerParam(LayerParam& layerParam) {
    return ReadParam(layerParam.param);
}


typedef struct {
    Param param(3, "PARTS_PARAM_ST", 1);
    local int i <hidden=true>;
    for (i = 0; i < param.count - 1; i++) {
        FSeek(param.offsets[i].val);
        Part part;
    }
    FSeek(param.nextParamOffset.val);
} PartsParam <read=ReadPartsParam, bgcolor=cLtBlue>;

string ReadPartsParam(PartsParam& partsParam) {
    return ReadParam(partsParam.param);
}


typedef struct {
    Param param(0, "MAPSTUDIO_PARTS_POSE_ST", 1);
    local int i <hidden=true>;
    for (i = 0; i < param.count - 1; i++) {
        FSeek(param.offsets[i].val);
        PartsPose partsPose;
    }
    FSeek(param.nextParamOffset.val);
} MapstudioPartsPose <read=ReadMapstudioPartsPose, bgcolor=cLtGray, fgcolor=cBlack>;

string ReadMapstudioPartsPose(MapstudioPartsPose& partsPose) {
    return ReadParam(partsPose.param);
}


typedef struct {
    Param param(0, "MAPSTUDIO_BONE_NAME_STRING", 1);
    local int i <hidden=true>;
    for (i = 0; i < param.count - 1; i++) {
        FSeek(param.offsets[i].val);
        BoneName boneName;
    }
    Assert(param.nextParamOffset.val == 0);
} MapstudioBoneName <read=ReadMapstudioBoneName, bgcolor=cLtGray, fgcolor=cBlack>;

string ReadMapstudioBoneName(MapstudioBoneName& boneName) {
    return ReadParam(boneName.param);
}

//------------------------------------------------

Header header <bgcolor=cLtRed>;
ModelParam models;
EventParam events;
PointParam points;
RouteParam routes;
LayerParam layers;
PartsParam parts;
MapstudioPartsPose partsPoses;
MapstudioBoneName boneNames;
