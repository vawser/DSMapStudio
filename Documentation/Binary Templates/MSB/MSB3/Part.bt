//------------------------------------------------
//--- 010 Editor v9.0.1 Binary Template
//
//      File: MSB3\Part.bt
//   Authors: TKGP
//   Version: 
//   Purpose: DS3 MSB parts
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

enum <int> PartType {
    PartTypeMapPiece = 0,
    PartTypeObject = 1,
    PartTypeEnemy = 2,
    PartTypePlayer = 4,
    PartTypeCollision = 5,
    PartTypeDummyObject = 9,
    PartTypeDummyEnemy = 10,
    PartTypeConnectCollision = 11,
};

struct PartEntity;

struct PartMapPiece;
struct PartObject;
struct PartEnemy;
struct PartPlayer;
struct PartCollision;
struct PartConnectCollision;

struct PartGparam;
struct PartSceneGparam;

//------------------------------------------------

typedef struct {
    local quad start <hidden=true> = FTell();

    quad nameOffset <format=hex>;
    PartType type;
    int id;
    int modelIndex;
    int unk14 <hidden=true>; Assert(unk14 == 0);
    quad sibOffset <format=hex>;
    Vector3 position;
    Vector3 rotation;
    Vector3 scale;
    int unk44; Assert(unk44 == -1);
    int mapStudioLayer;
    uint drawGroups[8];
    uint dispGroups[8];
    uint backreadGroups[8];
    int unkAC <hidden=true>; Assert(unkAC == 0);
    quad entityDataOffset <format=hex>;
    quad typeDataOffset <format=hex>;
    quad gparamOffset <format=hex>;
    quad sceneGparamOffset <format=hex>;
    
    FSeek(start + nameOffset);
    wstring name;

    FSeek(start + sibOffset);
    wstring sibPath;
    if (sibPath == "")
        FSkip(0x24);
    Align(8);
    Assert(FTell() - start == entityDataOffset);
    
    FSeek(start + entityDataOffset);
    PartEntity entity;
    Assert(FTell() - start == typeDataOffset);
    
    FSeek(start + typeDataOffset);
    switch (type) {
        case PartTypeMapPiece: PartMapPiece mapPiece; break;
        case PartTypeObject:
        case PartTypeDummyObject: PartObject object; break;
        case PartTypeEnemy:
        case PartTypeDummyEnemy: PartEnemy enemy; break;
        case PartTypePlayer: PartPlayer player; break;
        case PartTypeCollision: PartCollision collision; break;
        case PartTypeConnectCollision: PartConnectCollision connectCollision; break;
    }

    if (gparamOffset != 0) {
        Assert(FTell() - start == gparamOffset);

        FSeek(start + gparamOffset);
        PartGparam gparam;
    }
    
    if (sceneGparamOffset != 0) {
        Assert(FTell() - start == sceneGparamOffset);

        FSeek(start + sceneGparamOffset);
        PartSceneGparam sceneGparam;
    }
} Part <read=ReadPart>;

wstring ReadPart(Part& part) {
    string str;
    SPrintf(str, "%2i ", part.type);
    return str + part.name;
}


typedef struct {
    int entityID;
    byte unk04;
    byte unk05;
    short unk06 <hidden=true>; Assert(unk06 == 0);
    int unk08 <hidden=true>; Assert(unk08 == 0);
    byte lanternID;
    byte lodParamID;
    byte unk0E;
    byte pointLightShadowSource;
    byte shadowSource;
    byte shadowDest;
    byte isShadowOnly;
    byte drawByReflectCam;
    byte drawOnlyReflectCam;
    byte useDepthBiasFloat;
    byte disablePointLightEffect;
    byte unk17 <hidden=true>; Assert(unk17 == 0);
    int unk18;
    int entityGroupIDs[8];
    int unk3C <hidden=true>; Assert(unk3C == 0);
} PartEntity;


typedef struct {
    int unk00; Assert(unk00 == 0);
    int unk04; Assert(unk04 == 0);
} PartMapPiece;


typedef struct {
    int unk00 <hidden=true>; Assert(unk00 == 0);
    int unk04 <hidden=true>; Assert(unk04 == 0);
    int collisionPartIndex;
    byte breakTerm;
    byte netSyncType;
    byte collisionFilter;
    byte setMainObjStructureBooleans;
    short animIDs[4];
    short modelSfxParamRelativeIDs[4];
} PartObject;


typedef struct {
    int unk00 <hidden=true>; Assert(unk00 == 0);
    int unk04 <hidden=true>; Assert(unk04 == 0);
    int thinkParamID;
    int npcParamID;
    int talkID;
    byte pointMoveType;
    byte unk15 <hidden=true>; Assert(unk15 == 0);
    short platoonID;
    int charaInitID;
    int collisionPartIndex;
    short walkRouteIndex;
    short unk22 <hidden=true>; Assert(unk22 == 0);
    int unk24 <hidden=true>; Assert(unk24 == 0);
    int unk28;
    int unk2C;
    int unk30;
    int unk34;
    int backupEventAnimID;
    int unk3C;
    int unk40 <hidden=true>; Assert(unk40 == 0);
    int unk44 <hidden=true>; Assert(unk44 == 0);
    int unk48 <hidden=true>; Assert(unk48 == 0);
    int unk4C <hidden=true>; Assert(unk4C == 0);
    int unk50 <hidden=true>; Assert(unk50 == 0);
    int unk54 <hidden=true>; Assert(unk54 == 0);
    int unk58 <hidden=true>; Assert(unk58 == 0);
    int unk5C <hidden=true>; Assert(unk5C == 0);
    int unk60 <hidden=true>; Assert(unk60 == 0);
    int unk64 <hidden=true>; Assert(unk64 == 0);
    int unk68 <hidden=true>; Assert(unk68 == 0);
    int unk6C <hidden=true>; Assert(unk6C == 0);
    int unk70 <hidden=true>; Assert(unk70 == 0);
    int unk74 <hidden=true>; Assert(unk74 == 0);
    int unk78;
    int unk7C <hidden=true>; Assert(unk7C == 0);
    int unk80 <hidden=true>; Assert(unk80 == 0);
    float unk84;
    struct {
        int unk00; Assert(unk00 == -1);
        short unk04; Assert(unk04 == -1);
        short unk06; Assert(unk06 == 10);
    } unk88[5] <optimize=false>;
    int unkB0 <hidden=true>; Assert(unkB0 == 0);
    int unkB4 <hidden=true>; Assert(unkB4 == 0);
    int unkB8 <hidden=true>; Assert(unkB8 == 0);
    int unkBC <hidden=true>; Assert(unkBC == 0);
} PartEnemy;


typedef struct {
    int unk00; Assert(unk00 == 0);
    int unk04; Assert(unk04 == 0);
    int unk08; Assert(unk08 == 0);
    int unk0C; Assert(unk0C == 0);
} PartPlayer;


typedef struct {
    byte hitFilterID;
    byte soundSpaceType;
    short envLightMapSpotIndex;
    float reflectPlaneHeight;
    int navmeshGroups1 <hidden=true>; Assert(navmeshGroups1 == 0);
    int navmeshGroups2 <hidden=true>; Assert(navmeshGroups2 == 0);
    int navmeshGroups3 <hidden=true>; Assert(navmeshGroups3 == 0);
    int navmeshGroups4 <hidden=true>; Assert(navmeshGroups4 == 0);
    int vagrantEntityID1 <hidden=true>; Assert(vagrantEntityID1 == -1);
    int vagrantEntityID2 <hidden=true>; Assert(vagrantEntityID2 == -1);
    int vagrantEntityID3 <hidden=true>; Assert(vagrantEntityID3 == -1);
    short mapNameID;
    short disableStart;
    int disableBonfireEntityID;
    int chameleonParamID;
    int unkHitIndex;
    byte unk34;
    byte unk35;
    byte unk36;
    byte mapVisType;
    int playRegionID;
    short lockCamID1;
    short lockCamID2;
    int unk40 <hidden=true>; Assert(unk40 == 0);
    int unk44 <hidden=true>; Assert(unk44 == 0);
    int unk48 <hidden=true>; Assert(unk48 == 0);
    int unk4C <hidden=true>; Assert(unk4C == 0);
} PartCollision;


typedef struct {
    int collisionIndex;
    byte mapID[4];
    int unk08 <hidden=true>; Assert(unk08 == 0);
    int unk0C <hidden=true>; Assert(unk0C == 0);
} PartConnectCollision;


typedef struct {
    int lightSetID;
    int fogParamID;
    int lightScatteringID;
    int envMapID;
    int unk10 <hidden=true>; Assert(unk10 == 0);
    int unk14 <hidden=true>; Assert(unk14 == 0);
    int unk18 <hidden=true>; Assert(unk18 == 0);
    int unk1C <hidden=true>; Assert(unk1C == 0);
} PartGparam;


typedef struct {
    int unk00 <hidden=true>; Assert(unk00 == 0);
    int unk04 <hidden=true>; Assert(unk04 == 0);
    int unk08 <hidden=true>; Assert(unk08 == 0);
    int unk0C <hidden=true>; Assert(unk0C == 0);
    int unk10 <hidden=true>; Assert(unk10 == 0);
    int unk14 <hidden=true>; Assert(unk14 == 0);
    int unk18 <hidden=true>; Assert(unk18 == 0);
    int unk1C <hidden=true>; Assert(unk1C == 0);
    int unk20 <hidden=true>; Assert(unk20 == 0);
    int unk24 <hidden=true>; Assert(unk24 == 0);
    int unk28 <hidden=true>; Assert(unk28 == 0);
    int unk2C <hidden=true>; Assert(unk2C == 0);
    int unk30 <hidden=true>; Assert(unk30 == 0);
    int unk34 <hidden=true>; Assert(unk34 == 0);
    int unk38 <hidden=true>; Assert(unk38 == 0);
    byte eventIDs[4];
    float unk40;
    int unk44 <hidden=true>; Assert(unk44 == 0);
    int unk48 <hidden=true>; Assert(unk48 == 0);
    int unk4C <hidden=true>; Assert(unk4C == 0);
} PartSceneGparam;
