//------------------------------------------------
//--- 010 Editor v10.0.1 Binary Template
//
//      File: MSBEA\MSBEA.bt
//   Authors: TKGP
//   Version: 
//   Purpose: Enchanted Arms map layouts
//  Category: Dantelion
// File Mask: *.msb
//  ID Bytes: 00 00 00 0B
//   History: 
//------------------------------------------------

#include "..\..\Util.bt"
#include "..\MSB.bt"
#include "Model.bt"
#include "Event.bt"
#include "Point.bt"
#include "Part.bt"
#include "Tree.bt"

BigEndian();
local int VARINT_LONG = 0;

//------------------------------------------------

typedef struct {
    Param param(-1, "MODEL_PARAM_ST", 0);
    local int i <hidden=true>;
    for (i = 0; i < param.count - 1; i++) {
        FSeek(param.offsets[i].val);
        Model model;
    }
    FSeek(param.nextParamOffset.val);
} ModelParam <read=ReadModelParam, bgcolor=cLtGreen>;

string ReadModelParam(ModelParam& modelParam) {
    return ReadParam(modelParam.param);
}


typedef struct {
    Param param(-1, "EVENT_PARAM_ST", 0);
    local int i <hidden=true>;
    for (i = 0; i < param.count - 1; i++) {
        FSeek(param.offsets[i].val);
        Event event;
    }
    FSeek(param.nextParamOffset.val);
} EventParam <read=ReadEventParam, bgcolor=cYellow>;

string ReadEventParam(EventParam& eventParam) {
    return ReadParam(eventParam.param);
}


typedef struct {
    Param param(-1, "POINT_PARAM_ST", 0);
    local int i <hidden=true>;
    for (i = 0; i < param.count - 1; i++) {
        FSeek(param.offsets[i].val);
        Point point;
    }
    FSeek(param.nextParamOffset.val);
} PointParam <read=ReadPointParam, bgcolor=cAqua>;

string ReadPointParam(PointParam& pointParam) {
    return ReadParam(pointParam.param);
}


typedef struct {
    Param param(-1, "PARTS_PARAM_ST", 0);
    local int i <hidden=true>;
    for (i = 0; i < param.count - 1; i++) {
        FSeek(param.offsets[i].val);
        Part part;
    }
} PartsParam <read=ReadPartsParam, bgcolor=cLtBlue>;

string ReadPartsParam(PartsParam& partsParam) {
    return ReadParam(partsParam.param);
}


typedef struct {
    Param param(-1, "MAPSTUDIO_TREE_ST", 0);
    local int i <hidden=true>;
    for (i = 0; i < param.count - 1; i++) {
        FSeek(param.offsets[i].val);
        Tree tree;
    }
} MapstudioTree <read=ReadMapstudioTree, bgcolor=cLtBlue>;

string ReadMapstudioTree(MapstudioTree& mapstudioTree) {
    return ReadParam(mapstudioTree.param);
}

//------------------------------------------------

ModelParam models;
EventParam events;
PointParam points;
PartsParam parts;

local int nextParamOffset <hidden=true> = parts.param.nextParamOffset.val;
while (nextParamOffset != 0) {
    FSeek(nextParamOffset);
    MapstudioTree trees;
    nextParamOffset = trees.param.nextParamOffset.val;
}
