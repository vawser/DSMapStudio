//------------------------------------------------
//--- 010 Editor v9.0.1 Binary Template
//
//      File: MSBD\Event.bt
//   Authors: horkrux, TKGP
//   Version: 
//   Purpose: DeS MSB events
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

enum <int> EventType {
    EventTypeLight = 0,
    EventTypeSound = 1,
    EventTypeSFX = 2,
    EventTypeWind = 3,
    EventTypeTreasure = 4,
    EventTypeGenerator = 5,
    EventTypeMessage = 6,
};

struct EventLight;
struct EventSound;
struct EventSFX;
struct EventWind;
struct EventTreasure;
struct EventGenerator;
struct EventMessage;

//------------------------------------------------

typedef struct {
    local quad start <hidden=true> = FTell();
    
    int nameOffset <format=hex>;
    int eventID;
    EventType type;
    int id;
    int entityDataOffset <format=hex>;
    int typeDataOffset <format=hex>;
    int unk18 <hidden=true>; Assert(unk18 == 0);
    int unk1C <hidden=true>; Assert(unk1C == 0);

    Assert(nameOffset > 0);
    FSeek(start + nameOffset);
    string name;
    
    Assert(entityDataOffset > 0);
    FSeek(start + entityDataOffset);
    int partIndex;
    int pointIndex;
    int entityID;
    int unkB0C <hidden=true>; Assert(unkB0C == 0);
    
    Assert(typeDataOffset > 0);
    FSeek(start + typeDataOffset);
    switch (type) {
        case EventTypeLight: EventLight light; break;
        case EventTypeSound: EventSound sound; break;
        case EventTypeSFX: EventSFX sfx; break;
        case EventTypeWind: EventWind wind; break;
        case EventTypeTreasure: EventTreasure treasure; break;
        case EventTypeGenerator: EventGenerator generator; break;
        case EventTypeMessage: EventMessage message; break;
        default: Assert(false);
    }
} Event <read=ReadEvent>;

wstring ReadEvent(Event& event) {
    string str;
    SPrintf(str, "%2i ", event.type);
    return str + StringToWString(event.name, CHARSET_JAPANESE);
}


typedef struct {
    int pointLightID;
    int unk04;
} EventLight;


typedef struct {
    int unk00;
    int soundType;
    int soundID;
} EventSound;


typedef struct {
    int unk00;
    int effectID;
} EventSFX;


typedef struct {
    Vector3 windVecMin;
    float unk0C;
    Vector3 windVecMax;
    float unk1C;
    float windSwingCycle0;
    float windSwingCycle1;
    float windSwingCycle2;
    float windSwingCycle3;
    float windSwingPow0;
    float windSwingPow1;
    float windSwingPow2;
    float windSwingPow3;
} EventWind;


typedef struct {
    int unk00 <hidden=true>; Assert(unk00 == 0);
    int partIndex;
    int itemLot1;
    int unk0C <hidden=true>; Assert(unk0C == -1);
    int itemLot2;
    int unk14 <hidden=true>; Assert(unk14 == -1);
    int itemLot3;
    int unk1C <hidden=true>; Assert(unk1C == -1);
    int itemLot4;
    int unk24 <hidden=true>; Assert(unk24 == -1);
    int itemLot5;
    int unk2C <hidden=true>; Assert(unk2C == -1);
} EventTreasure;


typedef struct {
    byte maxNum;
    byte genType;
    short limitNum;
    short minGenNum;
    short maxGenNum;
    float minInterval;
    float maxInterval;
    byte initialSpawnCount;
    byte unk11 <hidden=true>; Assert(unk11 == 0);
    byte unk12 <hidden=true>; Assert(unk12 == 0);
    byte unk13 <hidden=true>; Assert(unk13 == 0);
    int unk14 <hidden=true>; Assert(unk14 == 0);
    int unk18 <hidden=true>; Assert(unk18 == 0);
    int unk1C <hidden=true>; Assert(unk1C == 0);
    int unk20 <hidden=true>; Assert(unk20 == 0);
    int unk24 <hidden=true>; Assert(unk24 == 0);
    int unk28 <hidden=true>; Assert(unk28 == 0);
    int unk2C <hidden=true>; Assert(unk2C == 0);
    int spawnPointIndices[4];
    int spawnPartIndices[32];
    int unkC0 <hidden=true>; Assert(unkC0 == 0);
    int unkC4 <hidden=true>; Assert(unkC4 == 0);
    int unkC8 <hidden=true>; Assert(unkC8 == 0);
    int unkCC <hidden=true>; Assert(unkCC == 0);
    int unkD0 <hidden=true>; Assert(unkD0 == 0);
    int unkD4 <hidden=true>; Assert(unkD4 == 0);
    int unkD8 <hidden=true>; Assert(unkD8 == 0);
    int unkDC <hidden=true>; Assert(unkDC == 0);
    int unkE0 <hidden=true>; Assert(unkE0 == 0);
    int unkE4 <hidden=true>; Assert(unkE4 == 0);
    int unkE8 <hidden=true>; Assert(unkE8 == 0);
    int unkEC <hidden=true>; Assert(unkEC == 0);
    int unkF0 <hidden=true>; Assert(unkF0 == 0);
    int unkF4 <hidden=true>; Assert(unkF4 == 0);
    int unkF8 <hidden=true>; Assert(unkF8 == 0);
    int unkFC <hidden=true>; Assert(unkFC == 0);
} EventGenerator;


typedef struct {
    short unk00;
    short messageID;
    int messageParam;
} EventMessage;
