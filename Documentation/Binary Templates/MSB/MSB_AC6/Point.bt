//------------------------------------------------
//--- 010 Editor v14.0 Binary Template
//
//      File: MSB-AC6/Point.bt
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: MSB_AC6
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

#include "Form.bt"

enum <int> PointType {
    //PointType = 0, //Unused
    PointTypeEntryPoint = 1, //侵入ポイント
    PointTypeEnvMapPoint = 2, //環境マップポイント
    //PointType = 3, //Unused
    PointTypeSound = 4, //サウンド
    PointTypeSfx = 5, //SFX
    PointTypeWindSfx = 6, //風SFX
    //PointType = 7, //Unused
    PointTypeReturnPoint = 8, //復帰ポイント
    PointTypeMessage = 9, //ヒント血文字
    //PointType = 10, //Unused
    //PointType = 11, //Unused
    //PointType = 12, //Unused
    PointTypeFallReturnPoint = 13, //ワープポイント(落下復帰ポイント)
    //PointType = 14, //Unused
    //PointType = 15, //Unused
    //PointType = 16, //Unused
    PointTypeEnvMapEffectBox = 17, //環境マップ効果BOX
    PointTypeWindPlacement = 18, //風配置範囲
    //PointType = 19, //Unused
    //PointType = 20, //Unused
    PointTypeMapConnection = 21, //マップ接続参照点
    PointTypeSourceWaypoint = 22, //Sourceウェイポイント
    PointTypeStaticWaypoint = 23, //Staticウェイポイント
    PointTypeMapGridLayerConnection = 24, //マップグリッドレイヤー接続情報
    PointTypeEnemySpawnPoint = 25, //敵スポーンポイント
    PointTypeBuddySummonPoint = 26, //バディ召喚ポイント
    PointTypeRollingAssetGeneration = 27, //転がるアセット生成ポイント
    PointTypeMufflingBox = 28, //ポイントタイプ_遮蔽ボックス
    PointTypeMufflingPortal = 29, //ポイントタイプ_遮蔽ポータル
    PointTypeSoundOverride = 30, //サウンド用空間タイプ上書きBOX
    PointTypeMufflingPlane = 31, //ポイントタイプ_遮蔽板
    PointTypePatrol = 32, //巡回ポイント
    PointTypeFeMapDisplay = 33, //FE＆マップ表示
    PointTypeElectromagneticStorm = 34, //電磁嵐
    PointTypeOperationalArea = 35, //作戦領域
    PointTypeAiInformationSharing = 36, //AI情報共有
    PointTypeAiTarget = 37, //AI目標ポイント
    PointTypeWaveSimulation = 38, //波シミュレーション領域
    PointTypeWwiseEnvironmentSound = 39, //wwise環境音
    PointTypeCover = 40, //カバー領域
    PointTypeMissionPlacement = 41, //ミッション配置
    PointTypeNaviVolumeResolution = 42, //ナビボリューム解像度
    PointTypeMiniArea = 43, //ミニエリア領域
    PointTypeConnectionBorder = 44, //接続ポイントの境界線
    PointTypeNaviGeneration = 45, //ナビ生成区域
    PointTypeTopdownView = 46, //上面図撮影領域
    PointTypeCharacterFollowing = 47, //キャラ追従
    PointTypeNaviCvCancel = 48, //ナビCVキャンセル
    PointTypeNavmeshCostControl = 49, //ナビメッシュコスト制御
    PointTypeArenaControl = 50, //アリーナ制圧領域
    PointTypeArenaAppearance = 51, //アリーナ出現位置
    PointTypeGarageCamera = 52, //ガレージレーンカメラポイント
    PointTypeJumpEdgeRestriction = 53, //ジャンプエッジ通行制限領域
    PointTypeCutscenePlayback = 54, //カットシーン再生ポイント
    PointTypeFallPreventionWallRemoval = 55, //落下防止壁削除
    PointTypeBigJump = 56, //大ジャンプポイント
    PointTypeOther = -1,
};

struct PointCommon;
struct PointIndexList;
struct PointStruct98;

struct PointEntryPoint;
struct PointEnvMapPoint;
struct PointSound;
struct PointSfx;
struct PointWindSfx;
struct PointEnvMapEffectBox;
struct PointMufflingBox;
struct PointMufflingPortal;
struct PointSoundOverride;
struct PointPatrol;
struct PointFeMapDisplay;
struct PointOperationalArea;
struct PointAiTarget;
struct PointWwiseEnvironmentSound;
struct PointCharacterFollowing;
struct PointNavmeshCostControl;
struct PointArenaControl;
struct PointArenaAppearance;
struct PointGarageCamera;
struct PointCutscenePlayback;
struct PointFallPreventionWallRemoval;
struct PointBigJump;

//------------------------------------------------

typedef struct (int version) {
    local quad start <hidden=true> = FTell();
    
    quad nameOffset <format=hex>; Assert(nameOffset);
    PointType type;
    int localIndex;
    FormType formType;
    Vector3 position;
    Vector3 rotation;
    int unk2c; // -1; not an index
    quad indexListOffset30 <format=hex>; Assert(indexListOffset30);
    quad indexListOffset38 <format=hex>; Assert(indexListOffset38);
    int unk78; // -1
    int unk7c; // -1
    quad formOffset <format=hex>;
    quad commonOffset <format=hex>; Assert(commonOffset);
    quad typeOffset <format=hex>;
    quad offset98 <format=hex>; Assert(offset98);
    
    FSeek(start + nameOffset);
    wstring name;
    
    // Align: 4
    FSeek(start + indexListOffset30);
    PointIndexList pointIndices30;
    
    // Align: 4
    FSeek(start + indexListOffset38);
    PointIndexList pointIndices38;
    
    // Align: 8
    if (formOffset) {
        FSeek(start + formOffset);
        ReadForm(formType);
    }
    
    FSeek(start + commonOffset);
    PointCommon common;
    
    // Align: 8 if type >= MufflingBox || type == Other
    FSeek(start + typeOffset);
    switch (type) {
        case PointTypeEntryPoint: PointEntryPoint entryPoint; break;
        case PointTypeEnvMapPoint: PointEnvMapPoint envMapPoint(version); break;
        case PointTypeSound: PointSound sound; break;
        case PointTypeSfx: PointSfx sfx; break;
        case PointTypeWindSfx: PointWindSfx windSfx; break;
        case PointTypeEnvMapEffectBox: PointEnvMapEffectBox envMapEffectBox; break;
        case PointTypeMufflingBox: PointMufflingBox mufflingBox; break;
        case PointTypeMufflingPortal: PointMufflingPortal mufflingPortal; break;
        case PointTypeSoundOverride: PointSoundOverride soundOverride; break;
        case PointTypePatrol: PointPatrol patrol; break;
        case PointTypeFeMapDisplay: PointFeMapDisplay feMapDisplay; break;
        case PointTypeOperationalArea: PointOperationalArea operationalArea; break;
        case PointTypeAiTarget: PointAiTarget aiTarget; break;
        case PointTypeWwiseEnvironmentSound: PointWwiseEnvironmentSound wwiseEnvironmentSound; break;
        case PointTypeCharacterFollowing: PointCharacterFollowing characterFollowing; break;
        case PointTypeNavmeshCostControl: PointNavmeshCostControl navmeshCostControl; break;
        case PointTypeArenaControl: PointArenaControl arenaControl; break;
        case PointTypeArenaAppearance: PointArenaAppearance arenaAppearance; break;
        case PointTypeGarageCamera: PointGarageCamera garageCamera(version); break;
        case PointTypeCutscenePlayback: PointCutscenePlayback cutscenePlayback; break;
        case PointTypeFallPreventionWallRemoval: PointFallPreventionWallRemoval fallPreventionWallRemoval; break;
        case PointTypeBigJump: PointBigJump bigJump; break;
        
        case PointTypeOther:
            if (typeOffset) {
                local int otherSize <hidden=true> = offset98 - typeOffset;
                ubyte other[otherSize] <bgcolor=cPurple, fgcolor=cYellow>;
                Printf("%d bytes of type data found in Other point %d\n", otherSize, localIndex);
            }
            break;
        
        default: Assert(!typeOffset); break;
    }
    
    // Align: 8 if type < MufflingBox && type != Other
    FSeek(start + offset98);
    PointStruct98 struct98;
} Point <read=ReadPoint, bgcolor=cAqua>;

wstring ReadPoint(Point &point) {
    return Str("<%s, %s> ",
        EnumToString(point.type), EnumToString(point.formType)) + point.name;
}

//------------------------------------------------

typedef struct {
    int partIndex; // -1
    uint entityId;
    byte unk08; // -1
    byte unk09; Assert(!unk09);
    short unk0a; Assert(unk0a == -1);
    int unk0c; // Maybe entity groups? 0c, 10, 28 look plausibly entity-ish
    int unk10;
    int unk14; Assert(!unk14);
    int unk18; Assert(!unk18);
    int unk1c; Assert(!unk1c);
    int unk20; Assert(!unk20);
    int unk24; Assert(!unk24);
    int unk28;
    int unk2c; Assert(!unk2c);
} PointCommon;

// In ACVI these are only used by MapGimmick, where they're definitely point indices
// In prior games, they really don't look like point indices, so it is a mystery
typedef struct {
    short indexCount;
    if (indexCount) {
        short indices[indexCount];
    }
} PointIndexList <read=Str("[%d]", indexCount)>;

typedef struct {
    int unk00; Assert(unk00 == -1);
    int unk04; Assert(!unk04);
    int unk08; Assert(unk08 == -1);
} PointStruct98;

//------------------------------------------------

typedef struct {
    int unk00 <hidden=true>; Assert(!unk00);
} PointEntryPoint;

typedef struct (int version) {
    float unk00; // 1000
    int unk04; // 4
    int unk08; Assert(unk08 == -1);
    byte unk0c; Assert(IsBool(unk0c)); // 1
    byte unk0d; Assert(IsBool(unk0d)); // 1
    byte unk0e; Assert(unk0e == 1);
    byte unk0f; Assert(IsBool(unk0f)); // 1
    float unk10; // 1
    float unk14; Assert(unk14 == 1);
    int unk18; // Bitfield?
    int unk1c; // Bytes?
    if (version >= 52) {
        int unk20;
        int unk24 <hidden=true>; Assert(!unk24);
    }
} PointEnvMapPoint;

typedef struct {
    int soundType;
    int soundId;
    int pointIndices[16]; // -1; Never used so not verified
    int unk48 <hidden=true>; Assert(!unk48);
} PointSound;

typedef struct {
    int effectId;
    int startDisabled; Assert(IsBool(startDisabled));
} PointSfx;

typedef struct {
    int effectId;
    int pointIndex; // -1
    float unk08; Assert(unk08 == -1.0);
    int unk0c <hidden=true>; Assert(!unk0c);
} PointWindSfx;

typedef struct {
    float unk00;
    float unk04;
    byte unk08; Assert(!unk08);
    byte unk09;
    byte unk0a;
    byte unk0b;
    int unk0c <hidden=true>; Assert(!unk0c);
    int unk10 <hidden=true>; Assert(!unk10);
    int unk14 <hidden=true>; Assert(!unk14);
    int unk18 <hidden=true>; Assert(!unk18);
    int unk1c <hidden=true>; Assert(!unk1c);
    int unk20 <hidden=true>; Assert(!unk20);
    float unk24; // 1
    float unk28; // 1
    short unk2c;
    byte unk2e; Assert(IsBool(unk2e)); // 1
    byte unk2f; Assert(IsBool(unk2f));
    short unk30; // -1
    short unk32; // -1
    int unk34 <hidden=true>; Assert(!unk34);
    int unk38 <hidden=true>; Assert(!unk38);
} PointEnvMapEffectBox;

typedef struct {
    int unk00;
    int unk04 <hidden=true>; Assert(!unk04);
    int unk08 <hidden=true>; Assert(!unk08);
    int unk0c <hidden=true>; Assert(!unk0c);
    int unk10 <hidden=true>; Assert(!unk10);
    int unk14 <hidden=true>; Assert(!unk14);
    quad unk18 <format=hex>; Assert(unk18 == 0x20); // Offset?
    
    int unk20;
    float unk24;
    float unk28;
    int unk2c;
    int unk30; Assert(!unk30);
    float unk34;
    int unk38; Assert(!unk38);
    float unk3c; Assert(unk3c == -1.0);
    float unk40; Assert(unk40 == -1.0);
    float unk44; Assert(unk44 == -1.0);
} PointMufflingBox;

typedef struct {
    int unk00 <hidden=true>; Assert(!unk00);
    int unk04 <hidden=true>; Assert(!unk04);
    int unk08 <hidden=true>; Assert(!unk08);
    int unk0c <hidden=true>; Assert(!unk0c);
    int unk10 <hidden=true>; Assert(!unk10);
    int unk14 <hidden=true>; Assert(!unk14);
    quad unk18 <format=hex>; Assert(unk18 == 0x20); // Offset?
    
    int unk20; Assert(!unk20);
    int unk24; Assert(!unk24);
    int unk28; Assert(!unk28);
    int unk2c; Assert(!unk2c);
    int unk30; Assert(!unk30);
    int unk34; Assert(unk34 == -1);
} PointMufflingPortal;

typedef struct {
    byte unk00; // -1
    byte unk01; Assert(!unk01);
    byte unk02; Assert(!unk02);
    byte unk03; // -1
    int unk04; Assert(unk04 == -1);
    int unk08; Assert(unk08 == -1);
    int unk0c <hidden=true>; Assert(!unk0c);
    int unk10 <hidden=true>; Assert(!unk10);
    int unk14 <hidden=true>; Assert(!unk14);
    int unk18 <hidden=true>; Assert(!unk18);
    int unk1c <hidden=true>; Assert(!unk1c);
} PointSoundOverride;

typedef struct {
    int unk00; // -1
    byte unk04;
    byte unk05 <hidden=true>; Assert(!unk05);
    byte unk06 <hidden=true>; Assert(!unk06);
    byte unk07 <hidden=true>; Assert(!unk07);
} PointPatrol;

typedef struct {
    byte unk00; // 1
    byte unk01; // 1
    byte unk02;
    byte unk03; Assert(IsBool(unk03));
    int unk04;
    int unk08 <hidden=true>; Assert(!unk08);
    int unk0c <hidden=true>; Assert(!unk0c);
} PointFeMapDisplay;

typedef struct {
    float unk00;
    float unk04;
    float unk08;
    float unk0c;
    float unk10;
    float unk14;
    int unk18; Assert(IsBool(unk18));
} PointOperationalArea;

typedef struct {
    byte unk00;
    byte unk01;
    short unk02 <hidden=true>; Assert(!unk02);
    int unk04;
} PointAiTarget;

typedef struct {
    byte unk00; Assert(IsBool(unk00));
    byte unk01;
    short unk02 <hidden=true>; Assert(!unk02);
} PointWwiseEnvironmentSound;

typedef struct {
    int unk00;
    int unk04;
    float unk08;
    float unk0c;
    float unk10;
    float unk14;
    float unk18;
    float unk1c;
} PointCharacterFollowing;

typedef struct {
    int unk00; // 2
} PointNavmeshCostControl;

typedef struct {
    int unk00 <hidden=true>; Assert(!unk00);
} PointArenaControl;

typedef struct {
    int unk00 <hidden=true>; Assert(!unk00);
} PointArenaAppearance;

typedef struct(int version) {
    float unk00; // -1
    float unk04;
    int unk08 <hidden=true>; Assert(!unk08);
} PointGarageCamera;

typedef struct {
    int unk00; // -1
    int unk04 <hidden=true>; Assert(!unk04);
} PointCutscenePlayback;

typedef struct {
    int unk00 <hidden=true>; Assert(!unk00);
    int unk04 <hidden=true>; Assert(!unk04);
} PointFallPreventionWallRemoval;

typedef struct {
    int jumpSpecifyAltParamId;
    int unk04 <hidden=true>; Assert(!unk04);
} PointBigJump;
