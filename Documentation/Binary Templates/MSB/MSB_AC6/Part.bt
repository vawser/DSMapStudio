//------------------------------------------------
//--- 010 Editor v14.0 Binary Template
//
//      File: MSB-AC6/Part.bt
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: MSB_AC6
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

enum <int> PartType {
    P_MAP = 0,
    P_OBJ = 1,
    P_ENE = 2,
    P_PLAYER = 4,
    P_HIT = 5,
    P_DUMMY_OBJ = 9,
    P_DUMMY_ENE = 10,
    P_CONNECT_HIT = 11,
    P_INVALID = 12,
    P_GEOM = 13,
};

struct PartStruct50;
struct PartStruct58;
struct PartCommon;
struct PartStruct70;
struct PartStruct78;
struct PartStruct80;
struct PartStruct88;
struct PartStruct90;
struct PartStruct98;
struct PartStructa0;

struct PartMap;
struct PartEnemy;
struct PartPlayer;
struct PartHit;
struct PartDummyObject;
struct PartConnectHit;
struct PartGeom;

//------------------------------------------------

typedef struct (int version) {
    local quad start <hidden=true> = FTell();
    
    quad nameOffset <format=hex>; Assert(nameOffset);
    PartType type;
    int localIndex;
    int modelIndex;
    int unk14 <hidden=true>; Assert(!unk14);
    quad layoutOffset <format=hex>; Assert(layoutOffset);
    Vector3 position;
    Vector3 rotation;
    Vector3 scale;
    int unk44; // -1; Moderately well-correlated with layer count
    int unk48; Assert(unk48 == -1);
    int unk4c; Assert(unk4c == 1);
    quad offset50 <format=hex>; Assert(offset50);
    quad offset58 <format=hex>;
    quad commonOffset <format=hex>; Assert(commonOffset);
    quad typeOffset <format=hex>; Assert(typeOffset);
    quad offset70 <format=hex>;
    quad offset78 <format=hex>;
    quad offset80 <format=hex>;
    quad offset88 <format=hex>; Assert(offset88);
    quad offset90 <format=hex>;
    quad offset98 <format=hex>; Assert(offset98);
    quad offseta0 <format=hex>;
    quad unka8 <hidden=true>; Assert(!unka8);
    quad unkb0 <hidden=true>; Assert(!unkb0);
    quad unkb8 <hidden=true>; Assert(!unkb8);
    
    FSeek(start + nameOffset);
    wstring name;
    
    FSeek(start + layoutOffset);
    wstring layoutPath;
    
    // Align: 8
    FSeek(start + offset50);
    PartStruct50 struct50;
    
    // Hit, Connect Hit, Geom
    if (offset58) {
        FSeek(start + offset58);
        PartStruct58 struct58;
    }
    
    FSeek(start + commonOffset);
    PartCommon common;
    
    FSeek(start + typeOffset);
    switch (type) {
        case P_MAP: PartMap map; break;
        case P_ENE: PartEnemy enemy; break;
        case P_PLAYER: PartPlayer player; break;
        case P_HIT: PartHit hit; break;
        case P_DUMMY_OBJ: PartDummyObject dummyObject; break;
        case P_DUMMY_ENE: PartEnemy dummyEnemy; break;
        case P_CONNECT_HIT: PartConnectHit connectHit; break;
        case P_GEOM: PartGeom geom(version); break;
        
        default: Assert(false, Str("Unknown part type: %d", type));
    }
    
    // Map, Ene, Hit, Dummy Obj, Dummy Ene, Geom
    if (offset70) {
        FSeek(start + offset70);
        PartStruct70 struct70;
    }
    
    // Hit
    if (offset78) {
        FSeek(start + offset78);
        PartStruct78 struct78;
    }
    
    // Map, Geom
    if (offset80) {
        FSeek(start + offset80);
        PartStruct80 struct80;
    }
    
    FSeek(start + offset88);
    PartStruct88 struct88;
    
    // Map, Geom
    if (offset90) {
        FSeek(start + offset90);
        PartStruct90 struct90;
    }
    
    FSeek(start + offset98);
    PartStruct98 struct98;
    
    // Map, Hit, Connect Hit, Geom
    if (offseta0) {
        FSeek(start + offseta0);
        PartStructa0 structa0;
    }
} Part <read=ReadPart, bgcolor=cLtBlue>;

wstring ReadPart(Part &part) {
    return Str("<%s> ", EnumToString(part.type)) + part.name;   
}

//------------------------------------------------

// Unverified
typedef struct {
    uint dispGroups[8];
    uint drawGroups[8];
    uint hitMask[32];
    byte unkc0; Assert(IsBool(unkc0));
    byte unkc1; Assert(!unkc1);
    byte unkc2; Assert(!unkc2);
    byte unkc3; Assert(!unkc3);
    short unkc4; Assert(unkc4 == -1);
    short unkc6; Assert(!unkc6);
    
    local int i <hidden=true>;
    for (i = 0; i < 48; i++) {
        int unkc8 <hidden=true>; Assert(unkc8 == 0);
    }
} PartStruct50;

// Unverified
typedef struct {
    int unk00; // -1
    uint dispGroups[8];
    short unk24; Assert(!unk24);
    short unk26; Assert(unk26 == -1);
    int unk28 <hidden=true>; Assert(!unk28);
    int unk2c <hidden=true>; Assert(!unk2c);
    int unk30 <hidden=true>; Assert(!unk30);
    int unk34 <hidden=true>; Assert(!unk34);
    int unk38 <hidden=true>; Assert(!unk38);
    int unk3c <hidden=true>; Assert(!unk3c);
    int unk40 <hidden=true>; Assert(!unk40);
    int unk44 <hidden=true>; Assert(!unk44);
} PartStruct58;

// These are probably the same bytes as usual, but I don't feel like testing
typedef struct {
    uint entityId;
    int unk04; Assert(IsBool(unk04));
    int unk08;
    byte unk0c; Assert(IsBool(unk0c));
    byte unk0d; Assert(IsBool(unk0d));
    byte unk0e; Assert(IsBool(unk0e));
    byte unk0f; Assert(IsBool(unk0f));
    byte unk10; Assert(IsBool(unk10));
    byte unk11; Assert(IsBool(unk11)); // 1
    short unk12; Assert(!unk12);
    byte unk14; Assert(IsBool(unk14));
    byte unk15; Assert(IsBool(unk15));
    byte unk16; Assert(IsBool(unk16));
    byte unk17; Assert(IsBool(unk17));
    int unk18; Assert(IsBool(unk18));
    uint entityGroupIds[8];
    short unk3c; // -1
    byte unk3e; Assert(!unk3e);
    byte unk3f; Assert(IsBool(unk3f));
} PartCommon;

typedef struct {
    int unk00; // -1
    int unk04; // -1
    int unk08 <hidden=true>; Assert(!unk08);
    int unk0c <hidden=true>; Assert(!unk0c);
    int unk10 <hidden=true>; Assert(!unk10);
    int unk14 <hidden=true>; Assert(!unk14);
    int unk18 <hidden=true>; Assert(!unk18);
    int unk1c <hidden=true>; Assert(!unk1c);
} PartStruct70;

typedef struct {
    int unk00; Assert(!unk00);
    int unk04; Assert(!unk04);
    int unk08; Assert(!unk08);
    int unk0c; Assert(!unk0c);
    float unk10; // -1
    int unk14; Assert(unk14 == -1);
    byte unk18; // -1
    byte unk19; // -1
    byte unk1a; // -1
    byte unk1b; Assert(unk1b == -1);
    int unk1c <hidden=true>; Assert(!unk1c);
    int unk20 <hidden=true>; Assert(!unk20);
    int unk24 <hidden=true>; Assert(!unk24);
    int unk28 <hidden=true>; Assert(!unk28);
    int unk2c <hidden=true>; Assert(!unk2c);
    int unk30 <hidden=true>; Assert(!unk30);
    int unk34 <hidden=true>; Assert(!unk34);
    int unk38 <hidden=true>; Assert(!unk38);
    int unk3c <hidden=true>; Assert(!unk3c);
    int unk40 <hidden=true>; Assert(!unk40);
    int unk44 <hidden=true>; Assert(!unk44);
    int unk48 <hidden=true>; Assert(!unk48);
    int unk4c <hidden=true>; Assert(!unk4c);
} PartStruct78;

typedef struct {
    int unk00;
    int unk04;
    int unk08;
    int unk0c;
    int unk10;
    int unk14;
    int unk18; Assert(unk18 == -1);
    int unk1c <hidden=true>; Assert(!unk1c);
} PartStruct80;

typedef struct {
    byte unk00; Assert(IsBool(unk00));
    byte unk01; Assert(IsBool(unk01));
    short unk02 <hidden=true>; Assert(!unk02);
    int unk04 <hidden=true>; Assert(!unk04);
    int unk08 <hidden=true>; Assert(!unk08);
    int unk0c <hidden=true>; Assert(!unk0c);
    int unk10 <hidden=true>; Assert(!unk10);
    int unk14 <hidden=true>; Assert(!unk14);
    int unk18 <hidden=true>; Assert(!unk18);
    int unk1c <hidden=true>; Assert(!unk1c);
} PartStruct88;

typedef struct {
    int unk00;
    int unk04 <hidden=true>; Assert(!unk04);
    int unk08 <hidden=true>; Assert(!unk08);
    int unk0c <hidden=true>; Assert(!unk0c);
    int unk10 <hidden=true>; Assert(!unk10);
    int unk14 <hidden=true>; Assert(!unk14);
    int unk18 <hidden=true>; Assert(!unk18);
    int unk1c <hidden=true>; Assert(!unk1c);
} PartStruct90;

typedef struct {
    int unk00; Assert(unk00 == -1);
    int unk04; Assert(!unk04);
    int unk08; Assert(!unk08);
    int unk0c; Assert(unk0c == -1);
    int unk10; Assert(!unk10);
    int unk14; Assert(unk14 == -1);
    int unk18 <hidden=true>; Assert(!unk18);
    int unk1c <hidden=true>; Assert(!unk1c);
} PartStruct98;

typedef struct {
    int unk00 <hidden=true>; Assert(!unk00);
    int unk04 <hidden=true>; Assert(!unk04);
    int unk08 <hidden=true>; Assert(!unk08);
    int unk0c <hidden=true>; Assert(!unk0c);
    int unk10 <hidden=true>; Assert(!unk10);
    int unk14 <hidden=true>; Assert(!unk14);
    int unk18 <hidden=true>; Assert(!unk18);
    int unk1c <hidden=true>; Assert(!unk1c);
} PartStructa0;

//------------------------------------------------

typedef struct {
    int unk00 <hidden=true>; Assert(!unk00);
    int unk04 <hidden=true>; Assert(!unk04);
} PartMap;

typedef struct {
    local quad start <hidden=true> = FTell();
    
    int unk00; // -1
    int unk04; Assert(!unk04);
    int npcThinkParamId;
    int npcParamId;
    int unk10;
    short unk14; Assert(!unk14);
    short unk16;
    int charaInitParamId; // -1
    int partIndex; // -1; This is used twice ever in ACVI so hypothetically it could have changed
    short patrolPointIndex; // -1; Local index in patrol points
    short unk22; // -1
    int unk24; Assert(unk24 == -1);
    int unk28; Assert(!unk28);
    int unk2c; Assert(!unk2c);
    int unk30; Assert(!unk30);
    int unk34; Assert(!unk34);
    int unk38; // -1
    int unk3c; // -1
    int unk40; // Entity ID?
    int unk44; // -1
    int unk48;
    int unk4c; Assert(!unk4c);
    int unk50; // -1
    byte unk54; Assert(IsBool(unk54));
    byte unk55;
    byte unk56; // -1
    byte unk57 <hidden=true>; Assert(!unk57);
    int unk58; // -1
    int unk5c <hidden=true>; Assert(!unk5c);
    int unk60 <hidden=true>; Assert(!unk60);
    int unk64 <hidden=true>; Assert(!unk64);
    int unk68 <hidden=true>; Assert(!unk68);
    int unk6c <hidden=true>; Assert(!unk6c);
    quad offset70 <format=hex>;
    quad offset78 <format=hex>; Assert(offset78);
    
    if (offset70) {
        FSeek(start + offset70);
        struct {
            short unk00; // -1
            short unk02; // -1
            short unk04; // -1
            short unk06; // -1
            short unk08; // -1
            short unk0a <hidden=true>; Assert(!unk0a);
            int unk0c <hidden=true>; Assert(!unk0c);
        } struct70;
    }
    
    FSeek(start + offset78);
    struct {
        int unk00; Assert(!unk00);
        float unk04; // 1
        struct {
            int unk00; Assert(unk00 == -1);
            short unk04; Assert(unk04 == -1);
            short unk06; Assert(unk06 == 10);
        } unk08[5] <optimize=false>;
        int unk30 <hidden=true>; Assert(!unk30);
        int unk34 <hidden=true>; Assert(!unk34);
        int unk38 <hidden=true>; Assert(!unk38);
        int unk3c <hidden=true>; Assert(!unk3c);
    } struct78;
} PartEnemy;

typedef struct {
    int unk00 <hidden=true>; Assert(!unk00);
    int unk04 <hidden=true>; Assert(!unk04);
    int unk08 <hidden=true>; Assert(!unk08);
    int unk0c <hidden=true>; Assert(!unk0c);
} PartPlayer;

typedef struct {
    byte unk00;
    byte unk01; // -1
    byte unk02; // -1
    byte unk03; // -1
    float unk04;
    int unk08; Assert(!unk08);
    int unk0c; Assert(!unk0c);
    int unk10; Assert(!unk10);
    int unk14; Assert(!unk14);
    int unk18; Assert(!unk18);
    int unk1c; Assert(!unk1c);
    int unk20; Assert(!unk20);
    short unk24; Assert(unk24 == -1);
    short unk26; Assert(IsBool(unk26));
    int unk28; Assert(!unk28);
    int unk2c; Assert(unk2c == -1);
    int unk30; Assert(!unk30);
    byte unk34; Assert(unk34 == -1);
    byte unk35; Assert(!unk35);
    short unk36; Assert(IsBool(unk36));
    int unk38; Assert(!unk38);
    int unk3c; Assert(unk3c == -1);
    int unk40 <hidden=true>; Assert(!unk40);
    int unk44 <hidden=true>; Assert(!unk44);
    int unk48 <hidden=true>; Assert(!unk48);
    int unk4c <hidden=true>; Assert(!unk4c);
    int unk50 <hidden=true>; Assert(!unk50);
    int unk54 <hidden=true>; Assert(!unk54);
} PartHit;

typedef struct {
    int unk00; Assert(!unk00);
    int unk04; Assert(!unk04);
    int unk08; Assert(unk08 == -1);
    int unk0c; Assert(!unk0c);
    int unk10; Assert(unk10 == -1);
    int unk14; Assert(unk14 == -1);
    int unk18; Assert(unk18 == -1);
    int unk1c; Assert(unk1c == -1);
} PartDummyObject;

typedef byte MapId[4] <read=Str("m%02d_%02d_%02d_%02d",
    this[0], this[1], this[2], this[3])>;

typedef struct {
    int hitPartIndex; // -1; Local index in hit parts
    MapId mapId;
    int unk08 <hidden=true>; Assert(!unk08);
    int unk0c <hidden=true>; Assert(!unk0c);
} PartConnectHit;

typedef struct (int version) {
    local quad start <hidden=true> = FTell();
    
    byte unk00; Assert(IsBool(unk00));
    byte unk01;
    byte unk02; Assert(!unk02);
    byte unk03;
    int unk04; // -1
    int unk08; Assert(!unk08);
    int unk0c; Assert(!unk0c);
    byte unk10;
    byte unk11; Assert(IsBool(unk11));
    byte unk12; Assert(IsBool(unk12));
    byte unk13; Assert(IsBool(unk13));
    short unk14; // -1
    short unk16; Assert(unk16 == -1);
    int unk18; Assert(unk18 == -1);
    short unk1c; // -1
    short unk1e; // -1
    int unk20; // -1
    int unk24; // -1
    int unk28; // -1
    int unk2c; // -1
    int partIndex30; // -1; Not completely confirmed
    int partIndex34; // -1; Not completely confirmed
    int partIndex38; // -1; Not completely confirmed
    int partIndex3c; // -1
    int unk40; Assert(unk40 == -1);
    int unk44; // -1
    int unk48;
    byte unk4c; Assert(IsBool(unk4c));
    byte unk4d; // 1
    short unk4e; // -1
    int unk50; // -1
    int unk54; // Bitfield?
    int unk58; Assert(unk58 == -1);
    int unk5c; // -1
    quad offset60 <format=hex>; Assert(offset60);
    quad offset68 <format=hex>; Assert(offset68);
    quad offset70 <format=hex>; Assert(offset70);
    quad offset78 <format=hex>; Assert(offset78);
    
    if (version >= 52) {
        int unk80; Assert(!unk80);
        int unk84; Assert(!unk84);
        int unk88; Assert(!unk88);
        int unk8c; Assert(!unk8c);
        int unk90; Assert(!unk90);
        int unk94; Assert(!unk94);
        int unk98; Assert(!unk98);
        int unk9c; Assert(!unk9c);
        int unka0; Assert(!unka0);
        int unka4; Assert(!unka4);
        int unka8; Assert(!unka8);
        int unkac; Assert(!unkac);
        int unkb0; Assert(!unkb0);
        int unkb4; Assert(!unkb4);
        int unkb8; Assert(!unkb8);
        int unkbc; Assert(!unkbc);
    }
    
    FSeek(start + offset60);
    struct {
        short unk00; Assert(IsBool(unk00));
        short unk02; Assert(unk02 == -1);
        int unk04; Assert(IsBool(unk04));
        int unk08; Assert(!unk08);
        int unk0c; Assert(!unk0c);
        int unk10; Assert(!unk10);
        int unk14; Assert(unk14 == -1);
        int unk18; Assert(unk18 == -1);
        int unk1c <hidden=true>; Assert(!unk1c);
        int unk20 <hidden=true>; Assert(!unk20);
        int unk24 <hidden=true>; Assert(!unk24);
        int unk28 <hidden=true>; Assert(!unk28);
        int unk2c <hidden=true>; Assert(!unk2c);
        int unk30 <hidden=true>; Assert(!unk30);
        int unk34 <hidden=true>; Assert(!unk34);
        int unk38 <hidden=true>; Assert(!unk38);
        int unk3c <hidden=true>; Assert(!unk3c);
    } struct60;
    
    FSeek(start + offset68);
    struct {
        int unk00; Assert(!unk00);
        int unk04; Assert(unk04 == -1);
        int unk08; Assert(unk08 == -1);
        int unk0c; Assert(!unk0c);
        int unk10; Assert(!unk10);
        float unk14; // -1
        int unk18; Assert(unk18 == -1);
        int unk1c; // -1; Bytes, maybe?
        int unk20 <hidden=true>; Assert(!unk20);
        int unk24 <hidden=true>; Assert(!unk24);
        int unk28 <hidden=true>; Assert(!unk28);
        int unk2c <hidden=true>; Assert(!unk2c);
        int unk30 <hidden=true>; Assert(!unk30);
        int unk34 <hidden=true>; Assert(!unk34);
        int unk38 <hidden=true>; Assert(!unk38);
        int unk3c <hidden=true>; Assert(!unk3c);
    } struct68;
    
    FSeek(start + offset70);
    struct {
        int unk00; Assert(IsBool(unk00));
        float unk04;
        byte unk08; Assert(unk08 == -1);
        byte unk09 <hidden=true>; Assert(!unk09);
        short unk0a <hidden=true>; Assert(!unk0a);
        int unk0c <hidden=true>; Assert(!unk0c);
        int unk10 <hidden=true>; Assert(!unk10);
        int unk14 <hidden=true>; Assert(!unk14);
        int unk18 <hidden=true>; Assert(!unk18);
        int unk1c <hidden=true>; Assert(!unk1c);
        int unk20 <hidden=true>; Assert(!unk20);
        int unk24 <hidden=true>; Assert(!unk24);
        int unk28 <hidden=true>; Assert(!unk28);
        int unk2c <hidden=true>; Assert(!unk2c);
        int unk30 <hidden=true>; Assert(!unk30);
        int unk34 <hidden=true>; Assert(!unk34);
        int unk38 <hidden=true>; Assert(!unk38);
        int unk3c <hidden=true>; Assert(!unk3c);
    } struct70;
    
    FSeek(start + offset78);
    struct {
        byte unk00; Assert(IsBool(unk00));
        byte unk01; // -1
        byte unk02; // -1
        byte unk03 <hidden=true>; Assert(!unk03);
        int unk04 <hidden=true>; Assert(!unk04);
        int unk08 <hidden=true>; Assert(!unk08);
        int unk0c <hidden=true>; Assert(!unk0c);
        int unk10 <hidden=true>; Assert(!unk10);
        int unk14 <hidden=true>; Assert(!unk14);
        int unk18 <hidden=true>; Assert(!unk18);
        int unk1c <hidden=true>; Assert(!unk1c);
        int unk20 <hidden=true>; Assert(!unk20);
        int unk24 <hidden=true>; Assert(!unk24);
        int unk28 <hidden=true>; Assert(!unk28);
        int unk2c <hidden=true>; Assert(!unk2c);
        int unk30 <hidden=true>; Assert(!unk30);
        int unk34 <hidden=true>; Assert(!unk34);
        int unk38 <hidden=true>; Assert(!unk38);
        int unk3c <hidden=true>; Assert(!unk3c);
    } struct78;
} PartGeom;
