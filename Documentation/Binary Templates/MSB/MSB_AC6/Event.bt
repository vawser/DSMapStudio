//------------------------------------------------
//--- 010 Editor v14.0 Binary Template
//
//      File: MSB-AC6/Event.bt
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: MSB_AC6
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

enum <int> EventType {
    EventTypeLight = 0, //ポイントライト
    EventTypeSound = 1, //サウンド
    EventTypeSfx = 2, //SFX
    EventTypeMapWindSfx = 3, //SFX用マップ風
    EventTypeTreasure = 4, //OBJ用宝箱情報(オブジェクト共通イベント)
    EventTypeGenerator = 5, //敵ジェネレーター
    EventTypeMessage = 6, //ヒント血文字
    EventTypeObjAct = 7, //オブジェアクション情報
    EventTypeReturnPoint = 8, //復帰ポイント
    EventTypeMapOffset = 9, //マップオフセット
    //EventType = 10,
    //EventType = 11,
    EventTypeNpcEntryPoint = 12, //NPCへの侵入ポイント
    EventTypeWindSfx = 13, //風SFX
    EventTypePatrolInfo = 14, //(GR未使用)敵巡回情報
    EventTypePlatoonInfo = 15, //敵小隊情報
    //EventType = 16,
    //EventType = 17,
    //EventType = 18,
    //EventType = 19,
    EventTypePatrolRoute = 20, //巡回ルート
    EventTypeRiding = 21, //騎乗
    EventTypeStrategyRoute = 22, //攻略ルート
    EventTypePatrolRoutePermanent = 23, //巡回ルート(常駐用)
    EventTypeMapGimmick = 24, //マップギミック
    EventTypeOther = -1,
};

struct EventCommon;

struct EventTreasure;
struct EventGenerator;
struct EventMapOffset;
struct EventPlatoonInfo;
struct EventPatrolRoute;
struct EventMapGimmick;

//------------------------------------------------

typedef struct {
    local quad start <hidden=true> = FTell();
    
    quad nameOffset <format=hex>; Assert(nameOffset);
    int eventId; // -1
    EventType type;
    int localIndex;
    int unk14 <hidden=true>; Assert(!unk14);
    quad commonOffset <format=hex>; Assert(commonOffset);
    quad typeOffset <format=hex>;
    
    FSeek(start + nameOffset);
    wstring name;
    
    // Align: 8
    FSeek(start + commonOffset);
    EventCommon common;
    
    switch (type) {
        case EventTypeTreasure:
        case EventTypeGenerator:
        case EventTypeMapOffset:
        case EventTypePlatoonInfo:
        case EventTypePatrolRoute:
        case EventTypeMapGimmick: Assert(typeOffset); break;
        case EventTypeOther: Assert(!typeOffset); break;
        
        default: Assert(false, Str("Unexpected event type: %d", type));
    }
    
    if (typeOffset) {
        FSeek(start + typeOffset);
        switch (type) {
            case EventTypeTreasure: EventTreasure treasure; break;
            case EventTypeGenerator: EventGenerator generator; break;
            case EventTypeMapOffset: EventMapOffset mapOffset; break;
            case EventTypePlatoonInfo: EventPlatoonInfo platoonInfo; break;
            case EventTypePatrolRoute: EventPatrolRoute patrolRoute; break;
            case EventTypeMapGimmick: EventMapGimmick mapGimmick; break;
        }
    }
} Event <read=ReadEvent, bgcolor=cYellow>;

wstring ReadEvent(Event &event) {
    return Str("[%d] <%s> ", event.localIndex, EnumToString(event.type)) + event.name;    
}

//------------------------------------------------

typedef struct {
    int partIndex; // -1
    int pointIndex; // -1
    int entityId;
    byte unk0c; Assert(unk0c == -1);
    byte unk0d <hidden=true>; Assert(!unk0d);
    byte unk0e <hidden=true>; Assert(!unk0e);
    byte unk0f <hidden=true>; Assert(!unk0f);
} EventCommon;

//------------------------------------------------

typedef struct {
    int unk00 <hidden=true>; Assert(!unk00);
    int unk04 <hidden=true>; Assert(!unk04);
    int partIndex; // -1
    int unk0c <hidden=true>; Assert(!unk0c);
    int itemLotParamId;
    int unk14 <hidden=true>; Assert(!unk14);
    int unk18 <hidden=true>; Assert(!unk18);
    int unk1c <hidden=true>; Assert(!unk1c);
    int unk20 <hidden=true>; Assert(!unk20);
    int unk24 <hidden=true>; Assert(!unk24);
    int unk28 <hidden=true>; Assert(!unk28);
    int unk2c <hidden=true>; Assert(!unk2c);
    int unk30 <hidden=true>; Assert(!unk30);
    int unk34 <hidden=true>; Assert(!unk34);
    int actionButtonParamId;
    int pickupAnim; // 100
    byte unk40; Assert(IsBool(unk40));
    byte unk41; Assert(IsBool(unk41));
    short unk42 <hidden=true>; Assert(!unk42);
    int unk44 <hidden=true>; Assert(!unk44);
    int unk48 <hidden=true>; Assert(!unk48);
    int unk4c <hidden=true>; Assert(!unk4c);
} EventTreasure;

typedef struct {
    byte maxNum; // 1
    byte genType; // 3
    short limitNum; // -1
    short minGenNum; // 1
    short maxGenNum; // 1
    float minInterval;
    float maxInterval;
    byte initialSpawnCount;
    byte unk11 <hidden=true>; Assert(!unk11);
    byte unk12 <hidden=true>; Assert(!unk12);
    byte unk13 <hidden=true>; Assert(!unk13);
    float unk14;
    float unk18;
    int unk1c <hidden=true>; Assert(!unk1c);
    int unk20 <hidden=true>; Assert(!unk20);
    int unk24 <hidden=true>; Assert(!unk24);
    int unk28 <hidden=true>; Assert(!unk28);
    int unk2c <hidden=true>; Assert(!unk2c);
    int pointIndices[8];
    int unk50 <hidden=true>; Assert(!unk50);
    int unk54 <hidden=true>; Assert(!unk54);
    int unk58 <hidden=true>; Assert(!unk58);
    int unk5c <hidden=true>; Assert(!unk5c);
    int partIndices[32];
    int unke0 <hidden=true>; Assert(!unke0);
    int unke4 <hidden=true>; Assert(!unke4);
    int unke8 <hidden=true>; Assert(!unke8);
    int unkec <hidden=true>; Assert(!unkec);
    int unkf0 <hidden=true>; Assert(!unkf0);
    int unkf4 <hidden=true>; Assert(!unkf4);
    int unkf8 <hidden=true>; Assert(!unkf8);
    int unkfc <hidden=true>; Assert(!unkfc);
} EventGenerator;

typedef struct {
    Vector3 translation;
    float rotation; // Degrees
} EventMapOffset;

typedef struct {
    int unk00; // -1
    byte unk04; Assert(IsBool(unk04));
    byte unk05; Assert(IsBool(unk05));
    short unk06 <hidden=true>; Assert(!unk06);
    int unk08 <hidden=true>; Assert(!unk08);
    int unk0c <hidden=true>; Assert(!unk0c);
    int partIndices[32]; // -1
} EventPlatoonInfo;

typedef struct {
    int unk00;
    int unk04; Assert(unk04 == -1);
    int unk08;
    int unk0C;
    short pointIndices[24]; // -1
} EventPatrolRoute;

// Only used in m03_60_00_00, m10_00_00_00
// As a result, layout is highly speculative
typedef struct {
    int unk00; // MapGimmickParam ID?
    short pointIndex04; // -1
    short unk06; // -1
    int partIndex08; // -1
    short partIndices0c[14]; // -1
    short pointIndices28[16]; // -1
} EventMapGimmick;
