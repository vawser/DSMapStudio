//------------------------------------------------
//--- 010 Editor v9.0.2 Binary Template
//
//      File: SFXPARAM.bt
//   Authors: TKGP
//   Version: 
//   Purpose: DS2 special-purpose SFX params
//  Category: Dantelion
// File Mask: *.sfxparam
//  ID Bytes: 73 66 78
//   History: 
//------------------------------------------------

LittleEndian();

//------------------------------------------------

typedef struct {
    char magic[3]; Assert(magic == "sfx");
    char type; Assert(type == 'd' || type == 'p');
    int unk04;
    int rowCount;
    int unk0C; Assert(unk0C == 0x20);
    int unk10 <hidden=true>; Assert(unk10 == 0);
    int unk14 <hidden=true>; Assert(unk14 == 0);
    int unk18 <hidden=true>; Assert(unk18 == 0);
    int unk1C <hidden=true>; Assert(unk1C == 0);
} Header <bgcolor=cLtRed>;


typedef struct {
    int id;
    int unk04 <hidden=true>; Assert(unk04 == 0);
} DRow <read=ReadDRow, bgcolor=cLtGreen, optimize=false>;

string ReadDRow(DRow& row) {
    string str;
    return SPrintf(str, "%9i", row.id);
}


typedef struct {
    int id;
    float unk04;
    int unk08;
    int unk0C;
    byte unk10; Assert(unk10 == 0 || unk10 == 1);
    byte unk11; Assert(unk11 == 0 || unk11 == 1);
    byte unk12; Assert(unk12 == 0 || unk12 == 1);
    byte unk13; Assert(unk13 == 0 || unk13 == 1);
    int unk14;
    int unk18; // 2 shorts?
    int unk1C;
    float unk20;
    float unk24;
    float unk28;
    float unk2C;
    float unk30;
    float unk34;
    float unk38;
    float unk3C;
} PRow <read=ReadPRow, bgcolor=cLtGreen, optimize=false>;

string ReadPRow(PRow& row) {
    string str;
    return SPrintf(str, "%9i", row.id);
}

//------------------------------------------------

Header header;
if (header.type == 'd')
    struct { DRow rows[header.rowCount]; } rows <open=true>;
else if (header.type == 'p')
    struct { PRow rows[header.rowCount]; } rows <open=true>;