//------------------------------------------------
//--- 010 Editor v9.0.1 Binary Template
//
//      File: MTD.bt
//   Authors: TKGP
//   Version: 
//   Purpose: Material definition files
//  Category: Dantelion
// File Mask: *.mtd
//  ID Bytes: [+44] 4D 54 44 20
//   History: 
//------------------------------------------------

#include "Util.bt"

LittleEndian();

typedef struct (byte assert) {
    ubyte value; if (assert != -1) Assert(value == assert);
    if (FTell() % 4 != 0)
        ubyte padding[4 - FTell() % 4];
} Marker <read=ReadMarker>;

string ReadMarker(Marker& marker) {
    string str;
    SPrintf(str, "%2Xh", marker.value);
    return str;
}


typedef struct (int typeAssert, int versionAssert, byte markerAssert) {
    Align(4);
    int zero; Assert(zero == 0);
    // I just want to note that there are some files in DS2 (e.g. M[stone][DB].mtd)
    // where most of the lengths are completely wrong, even the main file size
    int length <format=hex>;
    local int end <format=hex> = FTell() + length;
    int type <format=hex>; if (typeAssert != -1) Assert(type == typeAssert);
    int version; if (versionAssert != -1) Assert(version == versionAssert);
    Marker marker(markerAssert);
} Block <read=ReadBlock, bgcolor=cBlack, fgcolor=cWhite>;

string ReadBlock(Block& block) {
    string str;
    SPrintf(str, "Len %8Xh | Type %8Xh | Ver %i", block.length, block.type, block.version);
    return str;
}


typedef struct (byte markerAssert) {
    int length;
    if (length > 0) {
        char str[length];
    } else {
        local string str = "";
    }
    Marker marker(markerAssert);
} MarkedString <read=ReadMarkedString>;

string ReadMarkedString(MarkedString& ms) {
    return ms.str;
}

////////////////////////////////////////////////////////////////

typedef struct {
    Block block(0x2000, -1, 0xA3);
    MarkedString type(0x35);
    int uvNumber;
    Marker marker1(0x35);
    int shaderDataIndex;
    
    if (block.version == 5) {
        int unkB0C; Assert(unkB0C == 0xA3);
        MarkedString path(0xBA);
        int floatCount;
        float floats[floatCount];
    }
} Texture <read=ReadTexture, bgcolor=cAqua, optimize=false>;

string ReadTexture(Texture& tex) {
    string str;
    if (tex.block.version == 5)
        SPrintf(str, "%s \"%s\"", tex.type.str, tex.path.str);
    else
        SPrintf(str, "%s", tex.type.str);
    return str;
}


typedef struct {
    Block block(-1, 1, -1);
    int valueCount;
    if (block.type == 0x1000)
        byte values[valueCount];
    else if (block.type == 0x1001)
        int values[valueCount];
    else if (block.type == 0x1002)
        float values[valueCount];
} Value;


typedef struct {
    Block block(4, 4, 0xA3);
    MarkedString name(0xA3);
    MarkedString type(0x04);
    int unkB00; Assert(unkB00 == 1);
    Value value;
    Marker end(0x04);
    int unkC00; Assert(unkC00 == 0);
} Param <read=ReadParam, bgcolor=cLtGreen, optimize=false>;

string ReadParam(Param& param) {
    string str;
    SPrintf(str, "%-6s %s", param.type.str, param.name.str);
    return str;
}


typedef struct {
    Block block(3, 4, 0xA3);
    int unkA04; Assert(unkA04 == 0);
    Marker marker1(0x03);
    int paramCount;
    struct { Param params[paramCount]; } params;
    Marker paramsEnd(0x03);
    int textureCount;
    struct { Texture textures[textureCount]; } textures;
    Marker end(0x04);
    int unkC00; Assert(unkC00 == 0);
} Lists;


typedef struct {
    Block block(2, 4, 0xA3);
    MarkedString shader(0xA3);
    MarkedString description(0x03);
    int unkB00; Assert(unkB00 == 1);
    Lists lists;
    Marker end(0x04);
    int unkC00; Assert(unkC00 == 0);
} Data;


typedef struct {
    Block block(1, 2, 0xB0);
    MarkedString magic(0x34); Assert(magic.str == "MTD ");
    int unkB00; Assert(unkB00 == 1000);
} Header;


typedef struct {
    Block block(0, 3, 0x01);
    Header header;
    Marker headerEnd(0x01);
    Data data;
    Marker end(0x04);
    int unkC00; Assert(unkC00 == 0);
} File <bgcolor=cLtRed>;

////////////////////////////////////////////////////////////////

File file;