//------------------------------------------------
//--- 010 Editor v7.0.2 Binary Template
//
//      File: FLTPARAM.bt
//   Authors: TKGP
//   Version: 
//   Purpose: DS2 drawparams
//  Category: Dark Souls
// File Mask: *.fltparam
//  ID Bytes: 66 69 6C 74 02 00 00 00 00 00 00 00
//   History: 
//------------------------------------------------

struct Header {
    char magic[4]; Assert(magic == "filt");
    int unk04; Assert(unk04 == 2);
    int unk08; Assert(unk08 == 0);
    int groupCount;
    int unk2Count;
    int headerSize <format=hex>;
    int groupHeadersOffset <format=hex>;
    int paramHeaderOffsetsOffset <format=hex>;
    int paramHeadersOffset <format=hex>;
    int valuesOffset <format=hex>;
    int unkOffset1 <format=hex>;
    int unkOffset2 <format=hex>;
    int unk3Count;
    int unkOffset3 <format=hex>;
    int unkOffset4 <format=hex>;
    int unk40; Assert(unk40 == 0);
} header <bgcolor=cLtRed>;

struct Vector2 {
    float x;
    float y;
    int unk08; Assert(unk08 == 0);
    int unk0C; Assert(unk0C == 0);
};

struct Vector4 {
    float x;
    float y;
    float z;
    float w;
};

struct Param {
    int paramHeaderOffset;
    local quad pos = FTell();
    FSeek(header.paramHeadersOffset + paramHeaderOffset);
    
    int valuesOffset;
    int unkOffset1;
    byte type;
    byte valueCount;
    byte unk0A; Assert(unk0A == 0);
    byte unk0B; Assert(unk0B == 0);
    string name1;
    //string name2;
    
    FSeek(header.valuesOffset + valuesOffset);
    local int color = GetBackColor();
    SetBackColor(cLtBlue);
    if (valueCount > 0) {
    switch (type) {
        case 0x1:
            int values[valueCount];
            break;
        
        case 0x2:
            short values[valueCount];
            break;

        case 0x3:
            int values[valueCount];
            break;

        case 0x5:
            byte values[valueCount];
            break;

        case 0x7:
            int values[valueCount];
            break;

        case 0x9:
            float values[valueCount];
            break;

        case 0xB:
            byte values[valueCount];
            break;

        case 0xC:
            Vector2 values[valueCount] <optimize=true>;
            break;
        
        case 0xD:
            Vector4 values[valueCount] <optimize=true>;
            break;

        case 0xE:
            Vector4 values[valueCount] <optimize=true>;
            break;

        case 0xF:
            int values[valueCount];
            break;
        
        default:
            Assert(false);
    }
    
    FSeek(header.unkOffset1 + unkOffset1);
    SetBackColor(cRed);
    int unk1s[valueCount];
    }

    SetBackColor(color);
    FSeek(pos);
};

struct Group {
    int groupHeaderOffset;
    local quad pos = FTell();
    FSeek(header.groupHeadersOffset + groupHeaderOffset);
    
    int paramCount;
    int paramHeaderOffsetsOffset;
    string name1;
    //string name2;
    
    FSeek(header.paramHeaderOffsetsOffset + paramHeaderOffsetsOffset);
    Param params[paramCount] <bgcolor=cAqua, optimize=false>;
    FSeek(pos);
} groups[header.groupCount] <bgcolor=cLtGreen, optimize=false>;

FSeek(header.unkOffset2);
struct Unk2 {
    int unk00 <format=hex>;
    int unk04 <format=hex>;
    int unk08 <format=hex>;
    int unk0C <format=hex>;
} unk2s[header.unk2Count] <bgcolor=cYellow>;

FSeek(header.unkOffset3);
struct Unk3 {
    int id;
    int count;
    int unkOffset4;
    
    local quad pos = FTell();
    FSeek(header.unkOffset4 + unkOffset4);
    int data[count] <bgcolor=cLtGray>;
    FSeek(pos);
} unk3s[header.unk3Count] <bgcolor=cGray, optimize=false>;