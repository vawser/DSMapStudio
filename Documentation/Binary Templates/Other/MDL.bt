//------------------------------------------------
//--- 010 Editor v9.0.2 Binary Template
//
//      File: MDL.bt
//   Authors: TKGP
//   Version: 
//   Purpose: 3D models on Xbox
//  Category: 
// File Mask: *.mdl
//  ID Bytes: [+4] 4D 44 4C 20
//   History: 
//------------------------------------------------

#include "..\Util.bt"

LittleEndian();

//------------------------------------------------

typedef struct {
    int fileSize <format=hex>;
    char magic[4]; Assert(magic == "MDL ");
    short unk08; Assert(unk08 == 1);
    short unk0A; Assert(unk0A == 1);
    int unk0C;
    int unk10 <format=hex>;
    int unk14 <format=hex>;

    int meshCount;
    int indexCount;
    int vertexCountA;
    int vertexCountB;
    int vertexCountC;
    int vertexCountD;
    int count30;
    int materialCount;
    int textureCount;

    int meshesOffset <format=hex>;
    int indicesOffset <format=hex>;
    int verticesOffsetA <format=hex>;
    int verticesOffsetB <format=hex>;
    int verticesOffsetC <format=hex>;
    int verticesOffsetD <format=hex>;
    int offset54 <format=hex>;
    int materialsOffset <format=hex>;
    int texturesOffset <format=hex>;
} Header <bgcolor=cLtRed>;


typedef struct {
    byte materialIndex;
    byte unk01;
    short vertexCount;
    int indexCount;
    int startVertex;
    int startIndex;
} Faceset <bgcolor=cDkYellow>;

typedef struct {
    short facesetCount;
    short unk02;
    int facesetsOffset;
    short unk[8];
    
    if (facesetCount > 0) {
        local quad pos <hidden=true> = FTell();
        FSeek(facesetsOffset);
        Faceset facesets[facesetCount];
        FSeek(pos);
    }
} FacesetC <bgcolor=cLtYellow, optimize=false>;


typedef struct {
    Vector3 translation;
    Vector3 rotation;
    Vector3 scale;
    int parentIndex;
    int childIndex;
    int nextSiblingIndex;
    int previousSiblingIndex;
    int facesetCountA;
    int facesetCountB;
    int facesetCountC;
    int facesetCountD;
    int facesetsOffsetA <format=hex>;
    int facesetsOffsetB <format=hex>;
    int facesetsOffsetC <format=hex>;
    int facesetsOffsetD <format=hex>;
    int unk54;
    Vector3 boundingBoxMin;
    Vector3 boundingBoxMax;
    short unk70[10]; // Probably bone indices, only present for faceset D
    int unk84 <hidden=true>; Assert(unk84 == 0);
    int unk88 <hidden=true>; Assert(unk88 == 0);
    int unk8C <hidden=true>; Assert(unk8C == 0);
    
    local quad pos <hidden=true> = FTell();
    if (facesetCountA > 0) {
        FSeek(facesetsOffsetA);
        Faceset facesetsA[facesetCountA];
    }
    if (facesetCountB > 0) {
        FSeek(facesetsOffsetB);
        Faceset facesetsB[facesetCountB];
    }
    if (facesetCountC > 0) {
        FSeek(facesetsOffsetC);
        struct { FacesetC facesetsC[facesetCountC]; } facesetsC;
    }
    if (facesetCountD > 0) {
        FSeek(facesetsOffsetD);
        struct { FacesetC facesetsD[facesetCountD]; } facesetsD;
    }
    FSeek(pos);
} Mesh <bgcolor=cYellow, optimize=false>;


typedef struct {
    float unk00;
    float unk04;
    float unk08;
    float unk0C;
    float unk10;
    float unk14;
    int unk18;
    int unk1C;
} Unk30 <bgcolor=cLtGray, optimize=false>;


typedef struct {
    int unk00; Assert(unk00 == 0);
    int unk04;
    int unk08;
    int unk0C;
    int textureIndex;
    int unk14;
    int unk18;
    int unk1C; Assert(unk1C == -1);
    float unk20; // Looks like three RGBAs
    float unk24;
    float unk28;
    float unk2C;
    float unk30;
    float unk34;
    float unk38;
    float unk3C;
    float unk40;
    float unk44;
    float unk48;
    float unk4C;
    int unk50 <hidden=true>; Assert(unk50 == 0);
    int unk54 <hidden=true>; Assert(unk54 == 0);
    int unk58 <hidden=true>; Assert(unk58 == 0);
    int unk5C <hidden=true>; Assert(unk5C == 0);
    float unk60;
    float unk64;
    float unk68;
    int unk6C;
    int unk70 <hidden=true>; Assert(unk70 == 0);
    int unk74 <hidden=true>; Assert(unk74 == 0);
    int unk78 <hidden=true>; Assert(unk78 == 0);
    int unk7C <hidden=true>; Assert(unk7C == 0);
} Material <bgcolor=cPurple, optimize=false>;


typedef struct {
    string texture;
} Texture <bgcolor=cLtGreen, optimize=false>;


typedef struct (int format) {
    local int format = format;

    Vector3 position;
    int normal; // 11 11 10 XYZ low-high
    int tangent; // Usually 0
    int bitangent; // Usually 0
    ubyte color[4] <format=hex>; // RGBA
    Vector2 uvs[4];
    
    if (format >= 1) {
        short unk3C;
        short unk3E;
    }
    
    if (format >= 2) {
        float unk40;
        float unk44;
    }
} Vertex <read=ReadVertex, bgcolor=cAqua, optimize=false>;

string ReadVertex(Vertex& vert) {
    string str;
    if (vert.format == 0) {
        SPrintf(str, "vert A");
    } else if (vert.format == 1) {
        SPrintf(str, "%4Xh %4Xh", vert.unk3C, vert.unk3E);
    } else {
        SPrintf(str, "%4Xh %4Xh", vert.unk3C, vert.unk3E);
    }
    return str;
}

typedef struct {
    Vector3 positions[16];
    int normals[16];
    int tangents[16];
    int bitangents[16];
    ubyte color[4] <format=hex>;
    Vector2 uvs[4];
    short unk1A4;
    short unk1A6;
    float unk1A8;
    float unk1AC;
} VertexD <read=ReadVertexD, bgcolor=cAqua, optimize=false>;

string ReadVertexD(VertexD& vert) {
    string str;
    SPrintf(str, "%2i %2i", vert.unk1A4, vert.unk1A6);
    return str;
}

//------------------------------------------------

Header header;

FSeek(header.meshesOffset);
struct { Mesh meshes[header.meshCount]; } meshes;

FSeek(header.indicesOffset);
short indices[header.indexCount] <bgcolor=cLtBlue>;

if (header.vertexCountA > 0) {
    FSeek(header.verticesOffsetA);
    struct { Vertex verticesA(0)[header.vertexCountA]; } verticesA;
}

if (header.vertexCountB > 0) {
    FSeek(header.verticesOffsetB);
    struct { Vertex verticesB(1)[header.vertexCountB]; } verticesB;
}

if (header.vertexCountC > 0) {
    FSeek(header.verticesOffsetC);
    struct { Vertex verticesC(2)[header.vertexCountC]; } verticesC;
}

if (header.vertexCountD > 0) {
    FSeek(header.verticesOffsetD);
    struct { VertexD verticesD[header.vertexCountD]; } verticesD;
}

if (header.count30 > 0) {
    FSeek(header.offset54);
    struct { Unk30 unk30s[header.count30]; } unk30s;
}

FSeek(header.materialsOffset);
struct { Material materials[header.materialCount]; } materials;

FSeek(header.texturesOffset);
struct { Texture textures[header.textureCount]; } textures;