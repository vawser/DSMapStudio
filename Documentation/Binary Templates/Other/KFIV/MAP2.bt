//------------------------------------------------
//--- 010 Editor v9.0.2 Binary Template
//
//      File: MAP2.bt
//   Authors: TKGP
//   Version: 
//   Purpose: Second struct in King's Field IV .map containers
//  Category: KFIV
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

// To use this template from another template, define MAP2_LIBRARY before including,
// then instantiate type MAP2.

LittleEndian();

//------------------------------------------------

typedef struct {
    int unk00;
    int unk04;
    int unk08;
    int unk0C;
    int unk10;
    int fileSize <format=hex>;
    int unk18;
    int unk1C;
    int unk20;
    int unk24;
    int unk28;
    int unk2C;
    int unk30;
    int unk34;
    short unk38;
    short unk3A;
    short unk3C;
    short unk3E;
    int unk40;
    int unk44;
    int unk48;
    int unk4C;
} MAP2Header <bgcolor=cLtRed>;


typedef struct {
    int unk00;
    int unk04;
    int unk08;
    int unk0C;
} MAP2Struct1Item <bgcolor=cGreen>;

typedef struct {
    short count00;
    short unk02;
    short unk04;
    short unk06;
    int unk08;
    int unk0C;
    int unk10;
    int unk14;
    int unk18;
    int unk1C;
    
    MAP2Struct1Item items[count00];
} MAP2Struct1 <bgcolor=cLtGreen, optimize=false>;


typedef struct {
    float unk00;
    float unk04;
    float unk08;
    float unk0C;
} MAP2Struct2 <bgcolor=cAqua>;

//------------------------------------------------

#ifdef MAP2_LIBRARY
typedef struct {
#endif

local quad fileStart <hidden=true> = FTell();

MAP2Header header;
if (header.unk38 > 0) {
    struct { MAP2Struct1 struct1s1[header.unk38]; } struct1s1;
}
if (header.unk3A > 0) {
    struct { MAP2Struct1 struct1s2[header.unk3A]; } struct1s2;
}
if (header.unk3C > 0) {
    struct { MAP2Struct1 struct1s3[header.unk3C]; } struct1s3;
}
if (header.unk3E > 0) {
    struct { MAP2Struct1 struct1s4[header.unk3E]; } struct1s4;
}
MAP2Struct2 struct2s[header.unk0C];

Assert(FTell() - fileStart <= header.fileSize,
    "MAP2 read past end of file.");
FSeek(fileStart + header.fileSize);

#ifdef MAP2_LIBRARY
} MAP2 <optimize=false>;
#endif
