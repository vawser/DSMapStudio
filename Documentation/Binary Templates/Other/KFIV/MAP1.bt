//------------------------------------------------
//--- 010 Editor v9.0.2 Binary Template
//
//      File: MAP1.bt
//   Authors: TKGP
//   Version: 
//   Purpose: First struct in King's Field IV .map containers
//  Category: KFIV
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

// To use this template from another template, define MAP1_LIBRARY before including,
// then instantiate type MAP1.

LittleEndian();

//------------------------------------------------

typedef struct {
    int fileSize <format=hex>;
    int unk04;
    int unk08;
    int unk0C;
    int unk10;
    int unk14;
    int unk18;
    int unk1C;
    int unk20;
    int unk24;
    float unk28;
    float unk2C;
    float unk30;
    int unk34;
    int count38;
    int unk3C;
} MAP1Header <bgcolor=cLtRed>;


typedef struct {
    int unk00;
    int unk04;
    int unk08;
    int unk0C;
    int unk10;
    int unk14;
    short unk18;
    short unk1A;
    short unk1C;
    short unk1E;
} MAP1Struct1Item <bgcolor=cGreen>;

typedef struct {
    int unk00;
    int unk04;
    int unk08;
    int unk0C;
    int unk10;
    int unk14;
    int unk18;
    int unk1C;
    int unk20;
    int unk24;
    int unk28;
    int unk2C;
    int unk30;
    int unk34;
    int unk38;
    int unk3C;
    int unk40;
    int unk44;
    int unk48;
    int unk4C;
    int unk50;
    int unk54;
    int unk58;
    int unk5C;
    int unk60;
    int unk64;
    int unk68;
    int unk6C;
    byte count70;
    byte unk71;
    short unk72;
    int unk74;
    int unk78;
    int unk7C;
    int unk80;
    int unk84;
    int unk88;
    int unk8C;
    
    MAP1Struct1Item items[count70];
    
    int unkX00;
    int unkX04;
    int unkX08;
    int unkX0C;
} MAP1Struct1 <bgcolor=cLtGreen, optimize=false>;

//------------------------------------------------

#ifdef MAP1_LIBRARY
typedef struct {
#endif

local quad fileStart <hidden=true> = FTell();

MAP1Header header;
struct { MAP1Struct1 struct1s[header.count38]; } struct1s;

Assert(FTell() - fileStart <= header.fileSize,
    "MAP1 read past end of file.");
FSeek(fileStart + header.fileSize);

#ifdef MAP1_LIBRARY
} MAP1 <optimize=false>;
#endif
