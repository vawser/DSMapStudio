//------------------------------------------------
//--- 010 Editor v9.0.2 Binary Template
//
//      File: OMD.bt
//   Authors: TKGP
//   Version: 
//   Purpose: King's Field IV .omd files
//  Category: KFIV
// File Mask: *.omd
//  ID Bytes: 
//   History: 
//------------------------------------------------

// To use this template from another template, define OMD_LIBRARY before including,
// then instantiate type OMD.

#include "..\..\Util.bt"

LittleEndian();

//------------------------------------------------

typedef struct {
    int fileSize <format=hex>;
    short boneCount;
    short unk06;
    int unk08;
    int offset0C <format=hex>;
} OMDHeader <bgcolor=cLtRed>;


typedef struct {
    int unk00;
    int unk04;
    int unk08;
    int unk0C;
    int unk10;
    int unk14;
    int unk18;
    int unk1C;
} OMDStruct2Item <bgcolor=cGreen>;

typedef struct {
    int unk00;
    int unk04;
    int unk08;
    int unk0C;
    int unk10;
    int unk14;
    int unk18;
    int unk1C;
    int unk20;
    int unk24;
    int unk28;
    int unk2C;
    int unk30;
    int unk34;
    int unk38;
    int unk3C;
    int unk40;
    int unk44;
    int unk48;
    int unk4C;
    int unk50;
    int unk54;
    int unk58;
    int unk5C;
    int unk60;
    int unk64;
    int unk68;
    int unk6C;
    byte count70;
    byte unk71;
    short unk72;
    int unk74;
    int unk78;
    int unk7C;
    int unk80;
    int unk84;
    int unk88;
    int unk8C;
    
    OMDStruct2Item items[count70];
    
    int unkX00;
    int unkX04;
    int unkX08;
    int unkX0C;
} OMDStruct2 <bgcolor=cLtGreen, optimize=false>;


typedef struct {
    Vector3 translation;
    Vector3 rotation;
    Vector3 scale;
    int struct2Offset <format=hex>;
    int struct2Count;
    int unk2C <hidden=true>; Assert(unk2C == 0);
    
    if (struct2Count > 0) {
        local quad pos <hidden=true> = FTell();
        FSeek(fileStart + struct2Offset);
        struct { OMDStruct2 struct2s[struct2Count]; } struct2s;
        FSeek(pos);
    }
} OMDBone <read=ReadOMDBone, bgcolor=cAqua, optimize=false>;

string ReadOMDBone(OMDBone& bone) {
    string str;
    return SPrintf(str, "[%i]", bone.struct2Count);
}


typedef struct {
    int unk00;
    int unk04;
    int unk08;
    int unk0C;
} OMDStruct3 <bgcolor=cLtPurple>;

//------------------------------------------------

#ifdef OMD_LIBRARY
typedef struct {
#endif

local quad fileStart <hidden=true> = FTell();

OMDHeader header;
struct { OMDBone bones[header.boneCount]; } bones;

if (header.offset0C != 0) {
    FSeek(fileStart + header.offset0C);
    OMDStruct3 struct3s[32];
}

Assert(FTell() - fileStart <= header.fileSize,
    "OMD read past end of file.");
FSeek(fileStart + header.fileSize);

#ifdef OMD_LIBRARY
} OMD <optimize=false>;
#endif
