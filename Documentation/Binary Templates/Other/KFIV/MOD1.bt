//------------------------------------------------
//--- 010 Editor v9.0.2 Binary Template
//
//      File: MOD1.bt
//   Authors: TKGP
//   Version: 
//   Purpose: First file in King's Field IV .mod containers
//  Category: KFIV
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

// To use this template from another template, define MOD1_LIBRARY before including,
// then instantiate type MOD1.

LittleEndian();

//------------------------------------------------

typedef struct {
    int fileSize <format=hex>;
    int unk04;
    int unk08;
    int unk0C;
    int unk10;
    int unk14;
    int unk18;
    float unk1C;
    int unk20;
    int unk24;
    int unk28;
    float unk2C;
    float unk30;
    float unk34;
    float unk38;
    float unk3C;
    int count1;
    int offset1 <format=hex>; Assert(offset1 == 0x60);
    int count2;
    int offset2 <format=hex>;
    int count3;
    int offset3 <format=hex>;
    int unk58; Assert(unk58 == 0);
    int unk5C; Assert(unk5C == -1);
} MOD1Header <bgcolor=cLtRed>;


typedef struct {
    short unk00;
    short unk02;
    int unk04;
    float unk08;
    float unk0C;
    float unk10;
    float unk14;
    float unk18;
    float unk1C;
} MOD1Struct1Item <bgcolor=cGreen>;

typedef struct {
    short count00;
    short unk02;
    int unk04;
    int unk08;
    int unk0C;
    int unk10;
    int unk14;
    int unk18;
    int unk1C;
    
    MOD1Struct1Item items[count00];
} MOD1Struct1 <bgcolor=cLtGreen, optimize=false>;


typedef struct {
    float unk00; // Not sure these are all floats
    float unk04;
    float unk08;
    float unk0C;
} MOD1Struct2 <bgcolor=cAqua>;


typedef struct {
    float unk00;
    float unk04;
    float unk08;
    float unk0C;
} MOD1Struct3 <bgcolor=cYellow>;

//------------------------------------------------

#ifdef MOD1_LIBRARY
typedef struct {
#endif

local quad fileStart <hidden=true> = FTell();

MOD1Header header;
FSeek(fileStart + header.offset1);
struct { MOD1Struct1 struct1s[header.count1]; } struct1s;
FSeek(fileStart + header.offset2);
MOD1Struct2 struct2s[header.count2];
FSeek(fileStart + header.offset3);
MOD1Struct3 struct3s[header.count3];

Assert(FTell() - fileStart <= header.fileSize,
    "MOD1 read past end of file.");
FSeek(fileStart + header.fileSize);

#ifdef MOD1_LIBRARY
} MOD1 <optimize=false>;
#endif
