//------------------------------------------------
//--- 010 Editor v9.0.2 Binary Template
//
//      File: MAP.bt
//   Authors: TKGP
//   Version: 
//   Purpose: King's Field IV .map files
//  Category: KFIV
// File Mask: *.map
//  ID Bytes: 
//   History: 
//------------------------------------------------

#define MAP1_LIBRARY
#include "MAP1.bt"
#define MAP2_LIBRARY
#include "MAP2.bt"
#define MAP6_LIBRARY
#include "MAP6.bt"
#define OM2_LIBRARY
#include "OM2.bt"
#define OMD_LIBRARY
#include "OMD.bt"
#define TX2_LIBRARY
#include "TX2.bt"

LittleEndian();

//------------------------------------------------

typedef struct {
    int fileSize <format=hex>;
    int offset1 <format=hex>;
    int offset2 <format=hex>;
    int offset3 <format=hex>;
    int offset4 <format=hex>;
    int offset5 <format=hex>;
    int offset6 <format=hex>;
    int offset7 <format=hex>; Assert(offset7 == 0);
    int offset8 <format=hex>;
    int offset9 <format=hex>;
    int offset10 <format=hex>;
    short count1;
    short count2;
    short count3;
    short count4;
    short count5;
    short count6;
    short count7; Assert(count7 == 0);
    short count8;
    short count9;
    short count10;
} Header <bgcolor=cLtRed>;


typedef struct {
    OMD omd;
    TX2 tx2;
} Struct3 <optimize=false>;

typedef struct {
    OM2 om2;
    TX2 tx2;
} Struct4 <optimize=false>;

typedef struct {
    OMD omd;
    TX2 tx2;
} Struct8 <optimize=false>;

//------------------------------------------------

Header header;
FSeek(header.offset1);
struct { MAP1 struct1s[header.count1]; } struct1s;
FSeek(header.offset2);
struct { MAP2 struct2s[header.count2]; } struct2s;
FSeek(header.offset3);
struct { Struct3 struct3s[header.count3]; } struct3s;
FSeek(header.offset4);
struct { Struct4 struct4s[header.count4]; } struct4s;
FSeek(header.offset5);
struct { MAP2 struct5s[header.count5]; } struct5s;
FSeek(header.offset6);
struct { MAP6 struct6s[header.count6]; } struct6s;
FSeek(header.offset8);
struct { Struct8 struct8s[header.count8]; } struct8s;
FSeek(header.offset9);
// Textures
ubyte struct9s[header.offset10 - header.offset9] <format=hex, bgcolor=cBlack, fgcolor=cSilver>;
FSeek(header.offset10);
// Sounds
ubyte struct10s[header.fileSize - header.offset10] <format=hex, bgcolor=cBlack, fgcolor=cSilver>;
