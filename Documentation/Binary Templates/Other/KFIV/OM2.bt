//------------------------------------------------
//--- 010 Editor v9.0.2 Binary Template
//
//      File: OM2.bt
//   Authors: TKGP
//   Version: 
//   Purpose: King's Field IV models
//  Category: KFIV
// File Mask: *.om2
//  ID Bytes: 
//   History: 
//------------------------------------------------

// To use this template from another template, define OM2_LIBRARY before including,
// then instantiate type OM2.

#include "..\..\Util.bt"

LittleEndian();

//------------------------------------------------

typedef struct {
    int fileSize <format=hex>;
    short count04;
    short meshCount;
    short unk08;
    short totalVertexCount;
    int unk0C <hidden=true>; Assert(unk0C == 0);
} OM2Header <bgcolor=cLtRed>;


typedef struct {
    float unk00;
    float unk04;
    float unk08;
    byte unk0C;
    byte unk0D <hidden=true>; Assert(unk0D == 0);
    byte unk0E <hidden=true>; Assert(unk0E == 0);
    byte unk0F <hidden=true>; Assert(unk0F == 0);
} OM2Struct1 <bgcolor=cLtGreen, optimize=false>;


typedef struct {
    int meshesOffset;
    short meshCount;
    byte unk05;
    byte struct2Index;
    int unk08 <hidden=true>; Assert(unk08 == 0);
    int unk0C <hidden=true>; Assert(unk0C == 0);
} OM2Struct2 <read=ReadOM2Struct2, bgcolor=cAqua, optimize=false>;

string ReadOM2Struct2(OM2Struct2& s2) {
    string str;
    return SPrintf(str, "[%i]", s2.meshCount);
}


typedef struct {
    Vector3 position;
    float unk0C;
    Vector3 unk10;
    int unk1C;
    Vector3 unk20;
    int unk2C;
    Vector4 unk30;
} OM2Vertex <read=ReadOM2Vertex, bgcolor=cBlue>;

string ReadOM2Vertex(OM2Vertex& vert) {
    string str;
    return SPrintf(str, "%s", ReadVector3(vert.position));
}


typedef struct {
    int unk00;
    int unk04;
    int unk08;
    int unk0C;
    int unk10;
    int unk14;
    int unk18;
    int unk1C;
    int unk20;
    int unk24;
    int unk28;
    int unk2C;
    int unk30;
    int unk34;
    int unk38;
    int unk3C;
    int unk40;
    int unk44;
    int unk48;
    int unk4C;
    int unk50;
    int unk54;
    int unk58;
    int unk5C;
    int unk60;
    int unk64;
    int unk68;
    int unk6C;
    int unk70;
    int unk74;
    int unk78;
    int unk7C;
    int unk80;
    int unk84;
    int unk88;
    int unk8C;
    int unk90;
    int unk94;
    int unk98;
    int unk9C;
    byte vertexCount;
    byte unkA1;
    short unkA2;
    int unkA4;
    int unkA8;
    int unkAC;
    
    OM2Vertex vertices[vertexCount];

    int unkX00;
    int unkX04;
    int unkX08;
    int unkX0C;
} OM2Mesh <read=ReadOM2Mesh, bgcolor=cLtBlue, optimize=false>;

string ReadOM2Mesh(OM2Mesh& mesh) {
    string str;
    return SPrintf(str, "%i", mesh.vertexCount);
}

//------------------------------------------------

#ifdef OM2_LIBRARY
typedef struct {
#endif

local quad fileStart <hidden=true> = FTell();

OM2Header header;
struct { OM2Struct1 struct1s[32]; } struct1s;
struct { OM2Struct2 struct2s[header.count04]; } struct2s;
struct { OM2Mesh meshes[header.meshCount]; } meshes;

Assert(FTell() - fileStart <= header.fileSize,
    "OM2 read past end of file.");
FSeek(fileStart + header.fileSize);

#ifdef OM2_LIBRARY
} OM2 <optimize=false>;
#endif
