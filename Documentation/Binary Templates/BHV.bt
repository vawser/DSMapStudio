//------------------------------------------------
//--- 010 Editor v14.0.1 Binary Template
//
//      File: BHV.bt
//   Authors: TKGP
//   Version: 
//   Purpose: 
//  Category: Coremats
// File Mask: *.bhv
//  ID Bytes: 
//   History: 
//------------------------------------------------

#define COMPACT hidden=true

#include "Common.bt"

const int DATA_START <hidden=true> = 0x20;

struct Transition;
struct Condition;
struct StructABB;
struct StructDA;

LittleEndian();

//------------------------------------------------

typedef struct {
    short version; Assert(version == 5 || version == 6 || version == 10 || version == 12);
    short unk02; Assert(unk02 == 3);
    int fileSize <format=hex>;
    int unk08 <hidden=true>; Assert(!unk08);
    int unk0c <hidden=true>; Assert(!unk0c);
    int unk10 <hidden=true>; Assert(!unk10);
    int unk14 <hidden=true>; Assert(!unk14);
    int unk18 <hidden=true>; Assert(!unk18);
    int unk1c <hidden=true>; Assert(!unk1c);
    
    int statesOffset <format=hex>;
    int stateCount;
    int offsetB <format=hex>;
    int countB;
    int offsetC <format=hex>;
    short countC;
    short sizeC;
    int offsetD <format=hex>;
    int countD;
    
    local int sizeB <hidden=true>;
    switch (version) {
        case 5: sizeB = 0x40; break;
        case 6: sizeB = 0x50; break;
        case 10: sizeB = 0x60; break;
        case 12: sizeB = 0x60; break;
        default: Assert(false);
    }
    Assert(offsetC == offsetB + countB * sizeB);
    Assert(offsetD == 0 || offsetD == offsetC + countC * sizeC);
} Header <bgcolor=cLtRed>;


typedef struct (int index) {
    local int index <hidden=true> = index;
    
    short unk00;
    short unk02;
    int offset04 <format=hex>;
    int transitionsOffset <format=hex, COMPACT>;
    int transitionCount <COMPACT>;
    struct {
    int unk10;
    int unk14;
    int unk18;
    int unk1c;
    int unk20;
    int unk24;
    int unk28;
    int unk2c;
    int unk30;
    int unk34;
    int unk38;
    int unk3c;
    float unk40;
    float unk44;
    float unk48;
    float unk4c;
    int unk50;
    int unk54;
    int unk58;
    int unk5c;
    int unk60;
    int unk64;
    int unk68;
    int unk6c;
    int unk70;
    int unk74;
    int unk78;
    int unk7c;
    if (header.version >= 10) {
        int unk80;
        int unk84;
        int unk88;
        int unk8c;
        int unk90;
        int unk94;
        int unk98;
        int unk9c;
    }
    } svalka;
    
    PushTell();
    // TODO
    if (DATA_START + offset04 != FileSize()) {
        FSeek(DATA_START + offset04);
        byte data <bgcolor=cYellow>;
    }
    if (transitionCount) {
        FSeek(DATA_START + transitionsOffset);
        Transition transitions[transitionCount];
    }
    SeekPop();
} State <read=ReadState, bgcolor=cLtYellow, optimize=false>;

string ReadState(State &state) {
    int thisOffset = state.offset04;
    int nextOffset = (state.index < header.stateCount - 1)
        ? states.states[state.index + 1].offset04
        : states.states[0].transitionsOffset;
    int dataSize = nextOffset - thisOffset;
    return Str("%3d, %3d [%2xh]", state.unk00, state.unk02, dataSize);
}


typedef struct {
    int stateIndex;
    int conditionsOffset <format=hex, COMPACT>;
    int conditionCount <COMPACT>;
    int offset0c <format=hex, COMPACT>;
    int unk10 <hidden=true>; Assert(!unk10);
    int unk14 <hidden=true>; Assert(!unk14);
    int unk18 <hidden=true>; Assert(!unk18);
    int unk1c <hidden=true>; Assert(!unk1c);
    
    PushTell();
    if (conditionCount) {
        FSeek(DATA_START + conditionsOffset);
        Condition conditions[conditionCount];
    }
    FSeek(DATA_START + offset0c);
    StructABB structABB;
    SeekPop();
} Transition <read=Str("-> %d", stateIndex), bgcolor=cDkYellow, optimize=false>;

typedef struct {
    byte id;
    byte unk01; Assert(!unk01);
    byte unk02; Assert(IsBool(unk02));
    byte unk03; Assert(IsBool(unk03));
    int dataOffset <format=hex>;
    byte unk08; Assert(IsBool(unk08));
    byte unk09; Assert(!unk09);
    byte unk0a; Assert(!unk0a);
    byte unk0b; Assert(IsBool(unk0b));
    int unk0c <hidden=true>; Assert(!unk0c);
    
    JumpIn(DATA_START + dataOffset);
    byte data <bgcolor=cDkRed>;
    JumpOut();
} Condition <read=id, bgcolor=cRed, optimize=false>;

// This is all probably wrong
typedef struct {
    byte unk00; Assert(IsBool(unk00));
    byte unk01;
    byte unk02; Assert(IsBool(unk02));
    byte unk03; Assert(!unk03);
    if (unk01 == 1) {
        float unk04;
        int unk08; Assert(!unk08);
        int unk0c; Assert(!unk0c);
        int unk10; Assert(!unk10);
        int unk14; Assert(!unk14);
        int unk18; Assert(!unk18);
    } else if (unk01 == 3) {
        int unk04;
        float unk08;
        int unk0c;
        int unk10;
        int unk14; Assert(!unk14);
        int unk18; Assert(!unk18);
        int unk1c; Assert(!unk1c);
    } else if (unk01 == 4) {
        int unk04;
        float unk08;
        int unk0c;
        int unk10; Assert(unk10 == -1);
        int unk14; Assert(unk14 == -1);
        int unk18; Assert(unk18 == -1);
        int unk1c; Assert(unk1c == -1);
        int unk20; Assert(unk20 == -1);
        int unk24; Assert(!unk24);
        int unk28; Assert(!unk28);
        int unk2c; Assert(!unk2c);
        int unk30; Assert(!unk30);
    } else {
        Assert(false);
    }
} StructABB <bgcolor=cLtBlue, optimize=false>;


typedef struct {
    int unk00;
    short unk04;
    short unk06;
    byte unk08;
    byte unk09;
    byte unk0a;
    byte unk0b;
    int unk0c;
    int unk10;
    int unk14;
    int unk18;
    int unk1c;
    float unk20;
    byte unk24;
    byte unk25;
    byte unk26;
    byte unk27;
    float unk28;
    float unk2c;
    int unk30;
    int unk34;
    int unk38;
    int unk3c;
    if (header.version >= 6) {
        int unk40;
        short unk44;
        short unk46;
        short unk48;
        short unk4a;
        short unk4c;
        short unk4e;
    }
    if (header.version >= 10) {
        short unk50;
        short unk52;
        short unk54;
        short unk56;
        int unk58 <hidden=true>; Assert(!unk58);
        int unk5c <hidden=true>; Assert(!unk5c);
    }
} StructB <read=unk00, bgcolor=cAqua, optimize=false>;


// Calling this a "struct" is perhaps a bit naff
typedef struct {
    byte unk00[header.sizeC];
} StructC <bgcolor=cPurple, optimize=true>;


typedef struct {
    int offset00 <format=hex>;
    int count04;
    int unk08; Assert(!unk08);
    int unk0c; Assert(!unk0c);
    int unk10;
    int unk14; Assert(!unk14);
    int unk18; Assert(!unk18);
    int unk1c; Assert(!unk1c);
    
    if (count04) {
        JumpIn(DATA_START + offset00);
        StructDA structDAs[count04];
        JumpOut();
    }
} StructD <bgcolor=cLtGray, optimize=false>;

typedef struct {
    short unk00;
    short unk02;
    int unk04;
    float unk08;
    float unk0c;
    float unk10;
    float unk14;
    float unk18;
    float unk1c;
    if (header.version >= 10) {
        int unk20;
        int unk24; Assert(!unk24);
        int unk28; Assert(!unk28);
        int unk2c; Assert(!unk2c);
    }
} StructDA <bgcolor=cSilver, optimize=false>;


typedef struct {
    short count;
    short offsets[count] <format=hex, bgcolor=cGreen>;
    struct { string str; } strings[count] <read=str, bgcolor=cDkGreen, optimize=false>;
} Strings <bgcolor=cLtGreen>;

//------------------------------------------------

// Surely this is not the correct way to determine anything
local enum { BHV_TYPE_BASENORMAL, BHV_TYPE_W, BHV_TYPE_WEAPON } type <hidden=true>;
switch (FileNameGetBase(GetFileName())) {
    case "basenormal.bhv": type = BHV_TYPE_BASENORMAL; break;
    case "weapon.bhv": type = BHV_TYPE_WEAPON; break;
    default: type = BHV_TYPE_W; break;
}
    
local int mysterySize <hidden=true>;
switch (type) {
    case BHV_TYPE_BASENORMAL: mysterySize = 0xe0; break;
    case BHV_TYPE_W: mysterySize = 0x40; break;
    case BHV_TYPE_WEAPON: mysterySize = 0; break;
    default: Assert(false);
}

Header header;
if (mysterySize) short mystery[mysterySize / 2] <bgcolor=cBlack>;

FSeek(DATA_START + header.statesOffset);
if (header.stateCount) {
    struct {
        local int i <hidden=true>;
        for (i = 0; i < header.stateCount; i++) {
            State states(i);
        }
    } states <read=Str("[%d]", header.stateCount)>;
}
FSeek(DATA_START + header.offsetB);
if (header.countB) StructB structBs[header.countB];
FSeek(DATA_START + header.offsetC);
if (header.countC) StructC structCs[header.countC];
FSeek(DATA_START + header.offsetD);
if (header.countD) StructD structDs[header.countD];

if (type == BHV_TYPE_BASENORMAL) Strings strings;
