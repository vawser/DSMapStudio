//------------------------------------------------
//--- 010 Editor v9.0.2 Binary Template
//
//      File: PFBB.bt
//   Authors: TKGP
//   Version: 
//   Purpose: Unknown DS2 format
//  Category: Dantelion
// File Mask: *.pfbbin
//  ID Bytes: 50 46 42 42 46 52 50 47 32
//   History: 
//------------------------------------------------

local int VARINT_LONG = ReadInt(0x24) == 0;
#include "Util.bt"

LittleEndian();

//------------------------------------------------

typedef struct {
    char magic[10]; Assert(magic == "PFBBFRPG2");
    short unk0A; Assert(unk0A == 0);
    int unk0C; Assert(unk0C == 0);
    int unk10; Assert(unk10 == 0);
    int unk14; Assert(unk14 == 0);
    short unk18; Assert(unk18 == 1);
    short unk1A; Assert(unk1A == 1);
    short unk1C; Assert(unk1C == 1);
    short unk1E; Assert(unk1E == 1);
    Varint offset20;
    Varint offset24;
    Varint offset28;
    short unk2C; Assert(unk2C == 1);
    short unk2E;
} Header <bgcolor=cLtRed>;


typedef struct {
    byte b;
} Unk11111 <bgcolor=cBlack, fgcolor=cWhite>;


typedef struct {
    Varint unk00;
    Varint offset04;
    
    local quad pos <hidden=true> = FTell();
    FSeek(offset04.val);
    Unk11111 unk11111;
    FSeek(pos);
} Unk1111 <optimize=false>;


typedef struct {
    Varint unk00;
    Varint offset04;
    
    local quad pos <hidden=true> = FTell();
    FSeek(offset04.val);
    Unk1111 unk1111;
    FSeek(pos);
} Unk111 <optimize=false>;


typedef struct {
    int unk00;
    int unk04;
    Varint offset08;
    
    local quad pos <hidden=true> = FTell();
    FSeek(offset08.val);
    Unk111 unk111s[unk04];
    FSeek(pos);
} Unk11 <optimize=false>;


typedef struct {
    int unk00;
    if (VARINT_LONG) {
        int zero <hidden=true>; Assert(zero == 0);
    }
    OffsetString name(VARINT_LONG, 1);
    OffsetString path(VARINT_LONG, 1);
    int unk0C;
    int unk10;
    Varint offset14;
    
    local quad pos <hidden=true> = FTell();
    FSeek(offset14.val);
    Unk11 unk11s[unk10];
    FSeek(pos);
} Unk1 <read=ReadUnk1, bgcolor=cLtGreen, optimize=false>;

wstring ReadUnk1(Unk1& unk1) {
    return unk1.path.str + " | " + unk1.name.str;
}

//------------------------------------------------

Header header;

FSeek(header.offset28.val);
Unk1 unk1s[header.unk2E];